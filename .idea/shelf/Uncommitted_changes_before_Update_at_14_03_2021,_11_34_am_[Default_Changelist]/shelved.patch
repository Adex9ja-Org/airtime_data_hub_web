Index: admin/app/Model/Repository.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?php\n/**\n * Created by PhpStorm.\n * User: HP\n * Date: 2/8/2020\n * Time: 2:06 PM\n */\n\nnamespace App\\Model;\n\n\nuse App\\Jobs\\SendMailJob;\nuse App\\UserEntity;\n\nuse DateTime;\nuse GuzzleHttp\\Client;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Support\\Carbon;\nuse Illuminate\\Support\\Facades\\Auth;\nuse Illuminate\\Support\\Facades\\DB;\n\nclass Repository\n{\n    private $table;\n    private $general_push_topic;\n    private $cc;\n    private $limit;\n    private $withdrawal_charge;\n\n    /**\n     * Repository constructor.\n     */\n    public function __construct()\n    {\n        $this->table = new TableEntity();\n        $this->general_push_topic = \"/topics/general\";\n        $this->cc = array(\"info@airtimedatahub.com\");\n        $this->limit = 1000;\n        $this->withdrawal_charge = 50;\n    }\n\n    public static function getAccountName($bank_code)\n    {\n        $bank = DB::selectOne(\"select * from bank_entity where bank_code = '$bank_code'\");\n        return $bank->bank_name;\n    }\n\n    public function getRef(){\n        $now = DateTime::createFromFormat('U.u', number_format(microtime(true), 6, '.', ''));\n        $date = $now->format(\"Ymdhisu\");\n        return substr($date, 0, 17);\n    }\n\n    public function getAccountList(){\n        return DB::select(\"SELECT P.*, B.bank_name FROM payment_account_entity as P INNER JOIN bank_entity as B on P.bank_code = B.bank_code\");\n    }\n\n    public function getBannerList($onlyActive = true)\n    {\n        if($onlyActive)\n            return DB::select(\"SELECT B.*, S.service_name as banner_name FROM `banner_entity` as B inner join services_entity as S on B.service_id = S.service_id and B.active = 1\");\n        else\n            return DB::select(\"SELECT B.*, S.service_name as banner_name FROM `banner_entity` as B inner join services_entity as S on B.service_id = S.service_id\");\n    }\n\n    public function getBannerById($searchValue)\n    {\n        return $this->table->getSingleItem('banner_entity', 'banner_id', $searchValue);\n    }\n\n    public function saveNewBanner( $inputs, $file)\n    {\n        return $this->table->insertNewEntry('banner_entity', 'banner_id', $inputs , $file, $this->getRef());\n    }\n\n    public function getBankList()\n    {\n        return $this->table->getItemList('bank_entity', 'bank_code', false);\n    }\n\n    public function getBankAcctInfo($arg)\n    {\n        return $this->table->getSingleItem('payment_account_entity', 'acc_no', $arg);\n    }\n\n    public function savePaymentAcct($inputs)\n    {\n        return $this->table->insertNewEntry('payment_account_entity', 'acc_no', $inputs);\n    }\n\n    public function getDataBalanceCodeList($onlyActive = true)\n    {\n        return $this->table->getItemList('data_balance_entity', 'net_code', $onlyActive);\n    }\n\n    public function getDataCode($arg)\n    {\n        return $this->table->getSingleItem('data_balance_entity', 'net_code', $arg);\n    }\n\n    public function updateDataBalanceCode($input, $arg)\n    {\n        return $this->table->updateTable('data_balance_entity', 'net_code', $arg, $input );\n    }\n\n    public function updateBanner($inputs, $file,  $arg)\n    {\n        return $this->table->updateTable('banner_entity', 'banner_id', $arg, $inputs, $file, $this->getRef());\n    }\n\n    public function getNetworkList()\n    {\n        return $this->table->getItemList('network_entity', 'net_name');\n    }\n\n    public function saveNewDataBalCode($inputs)\n    {\n        return $this->table->insertNewEntry('data_balance_entity', 'net_code', $inputs);\n    }\n\n    public function deActivatePaymentAcct($arg)\n    {\n        return $this->table->deactivate('payment_account_entity', 'acc_no', $arg);\n    }\n\n    public function updatePaymentAcct($input, $arg)\n    {\n        return $this->table->updateTable('payment_account_entity', 'acc_no', $arg, $input);\n    }\n\n    public function deActivateBanner($arg)\n    {\n        return $this->table->deactivate('banner_entity', 'banner_id', $arg);\n    }\n\n    public function getChargesList()\n    {\n        return $this->table->getItemList('conversion_rate_entity', 'conversion_id', true);\n    }\n\n    public function getChargeRate($arg)\n    {\n        return $this->table->getSingleItem('conversion_rate_entity', 'conversion_id', $arg);\n    }\n\n    public function updateChargesRate($input, $arg)\n    {\n        return $this->table->updateTable('conversion_rate_entity', 'conversion_id', $arg, $input);\n    }\n\n    public function deactivateDataBal($arg)\n    {\n        return $this->table->deactivate('data_balance_entity', 'net_code', $arg);\n    }\n\n    public function deActivateChargeRate($arg)\n    {\n        return $this->table->deactivate('conversion_rate_entity', 'conversion_id', $arg);\n    }\n\n    public function saveNewChargeRate($input)\n    {\n        $input['conversion_id'] = $this->getRef();\n        return $this->table->insertNewEntry('conversion_rate_entity', 'conversion_id', $input);\n    }\n\n    public function getUsersList()\n    {\n        return DB::select(\"SELECT * from user_entity ORDER by created_at DESC\");\n    }\n\n    public function deactivateUser($email)\n    {\n        $data = ['message' => 'User Banned'];\n        $user = $this->getUserByEmailPhoneBvn($email);\n        $this->sendPushNotification(\"09\", \"Account Banned!\", \"Your account has been banned!\", array($user->token), null, $data);\n        return $this->table->deactivate('user_entity', 'email', $email);\n    }\n\n    public function activateUser($arg)\n    {\n        return $this->table->activate('user_entity', 'email', $arg);\n    }\n\n    public function getUserRoles()\n    {\n        return $this->table->getItemList('user_role_entity', 'user_role');\n    }\n\n    public function deleteUserPrivilege($user_role)\n    {\n        DB::delete(\"delete from menu_privilege_entity where user_role = '$user_role'\");\n    }\n\n    public function addUserPrivilege($inputs, $user_role)\n    {\n        foreach ($inputs as $input){\n            $arr = ['user_role' => $user_role, 'link' => $input];\n            $this->table = new TableEntity();\n            $this->table->insertNewEntry('menu_privilege_entity', 'id', $arr, null, null, false);\n        }\n    }\n\n    public function getPrivileges($user_role)\n    {\n        return DB::select(\"SELECT ML.title, ML.link, MP.link as privilege from menu_link_entity as ML LEFT join menu_privilege_entity as MP on (ML.link = MP.link and MP.user_role = '$user_role')\");\n    }\n\n    public function getUserByEmail($email)\n    {\n        $user = $this->table->getSingleItem('user_entity', 'email', $email);\n        $user->virtual_bank_name = 'Sterling Bank Plc';\n        return $user ;\n    }\n\n    public function saveNewUser($input, bool $fromAdmin = false)\n    {\n        $data = [\n            'active' => ActiveStatus::Active,\n            'password' => base64_encode($input['password']),\n            'email' => $input['email'],\n            'phoneno' => $input['phoneno'],\n            'fullname' => $input['fullname'],\n            'address' => $input['address'],\n            'ref_code' => $input['ref_code'] ?? '',\n            'userRole' => $fromAdmin ? $input['userRole'] : UserRoles::user,\n        ];\n        $referral = $this->table->getSingleItem('referral_entity', 'ref_code', $input['ref_code'] ?? '');\n        $input['ref_code'] = $referral == null ? '' : $referral['ref_code'];\n        return $this->table->insertNewEntry('user_entity', 'email', $data);\n    }\n\n    public function updateUser($input, $email, $encodePassword = false, $adminUpdate = false)\n    {\n        $old_user = $this->getUserByEmail($email);\n        $isVerified = $this->isAccountVerified($old_user);\n        $password = $input['password'] ?? $old_user->password;\n        $data = [\n            'token' => $input['token'] ?? $old_user->token,\n            'pin' => $input['pin'] ?? $old_user->pin,\n            'gender' => $input['gender'] ?? $old_user->gender,\n            'image_url' => $input['image_url'] ?? $old_user->image_url,\n            'doc_type' => $input['doc_type'] ?? $old_user->doc_type,\n            'doc_url' => $input['doc_url'] ?? $old_user->doc_url,\n            'address' => $input['address'] ?? $old_user->address,\n            'password' => $encodePassword ? base64_encode($password) : $password,\n            'userRole' => $adminUpdate ? $input['userRole'] : $old_user->userRole\n        ];\n\n\n        if(!$isVerified){\n            $data['fullname'] = $input['fullname'] ?? $old_user->fullname;\n            $data['phoneno'] = $input['phoneno'] ?? $old_user->phoneno;\n            $data['dob'] = $input['dob'] ?? $old_user->dob;\n            $data['bvn_number'] = $input['bvn_number'] ?? $old_user->bvn_number;\n        }\n\n        return $this->table->updateTable('user_entity', 'email', $email, $data);\n    }\n\n    public function getMonthlyTransactionGraphData()\n    {\n        return DB::select(\"SELECT year(A.created_at) as years, monthname(A.created_at) as months, count(A.created_at) as value from voucher_entity as A  GROUP by concat(year(A.created_at), monthname(A.created_at)) order by A.created_at desc LIMIT 12\");\n    }\n\n    public function getDashBoardReportData()\n    {\n        return DB::selectOne(\"SELECT sum(case when approvalStatus = 1 then 1 else 0 end) as approved, sum( case when approvalStatus = 0 then 1 else 0 end) as pending, (select count(*) from user_entity where userRole = 'User') as users, (select count(*) from sub_product_entity where active = 1) as products, (select count(*) from support_entity) as feedbacks, (SELECT sum(case when trans_type = 'DR' then -amount else amount end) from wallet_entity) as wallet_balance FROM `voucher_entity`\");\n    }\n\n    public function validateUser($inputs)\n    {\n        $email = $inputs['email'];\n        $password = $inputs['password'];\n        $where = ['email' => $email, 'password' => base64_encode($password)];\n        $userEntity = new UserEntity();\n        return $userEntity->where($where)->first();\n    }\n\n    public function getTransactionListByApprovalStatus($approvalStatus)\n    {\n        return DB::select(\"SELECT V.*, U.fullname, S.sub_name FROM voucher_entity as V INNER JOIN user_entity as U on V.email = U.email INNER join sub_product_entity as S on V.sub_prod_id = S.sub_prod_id where approvalStatus in (\". implode(',', $approvalStatus). \") order by V.created_at desc limit ?\", array($this->limit));\n    }\n\n    public function getTransApprovalStatusGraphData()\n    {\n        return DB::select(\"SELECT (case WHEN approvalStatus = 0 THEN 'Pending' else (case WHEN approvalStatus = 1 THEN 'Approved' else (case WHEN approvalStatus = 2 THEN 'Cancelled' else (case when approvalStatus = 3 then 'Insufficient Balance' else 'Declined' end) end) end) end) as label, count(approvalStatus) as value from voucher_entity GROUP by approvalStatus\");\n    }\n\n    public function getTransTopSellingGraphData()\n    {\n        return DB::select(\"SELECT count(V.sub_prod_id) as value, S.sub_name as label from voucher_entity as V INNER join sub_product_entity as S on V.sub_prod_id = S.sub_prod_id group by V.sub_prod_id order by  count(V.sub_prod_id) desc limit 12\");\n    }\n\n    public function getTransTopBuyerGraphData()\n    {\n        return DB::select(\"SELECT COUNT(V.email) as value, U.fullname as label from voucher_entity as V INNER join user_entity as U on V.email = U.email GROUP by V.email ORDER by  COUNT(V.email) desc LIMIT 12\");\n    }\n\n    public function getTransPaymentChannelGraphData()\n    {\n        return DB::select(\"SELECT count(channel_name) as value, channel_name as label from voucher_entity GROUP by channel_name\");\n    }\n\n    public function updateTransactionStatus($arg, $status, $auto_ref = '', $approval_officer = '', $token = '', $serial = '')\n    {\n        if($status == RequestStatus::Approved){\n            $params  = [$status, $auto_ref, $approval_officer, $token, $serial, $arg];\n            DB::update(\"update voucher_entity set approvalStatus = ?, auto_ref = ?, approval_officer = ?, cardPin = ?, cardSerialNo = ? where ref = ?\", $params );\n            $transaction = $this->getTransactionDetailById($arg);\n            $user = $this->getUserByEmail($transaction->email);\n            $message = \"Ref: \". $transaction->ref . \" - \". RequestStatus::getReqTitle($status);\n            $this->sendPushNotification('01', 'Transaction Status', $message, array($user->token), null, $transaction);\n            $this->sendReceiptByMail($transaction, RequestStatus::getReqTitle($status). ' Transaction', array($transaction->email));\n        }\n        else{\n            $params  = [$status, $approval_officer, $token, $arg];\n            DB::update(\"update voucher_entity set approvalStatus = ?, approval_officer = ?, cardPin = ? where ref = ?\", $params );\n        }\n\n    }\n\n    public function getPageInfo($user_role, $uri)\n    {\n        return DB::selectOne(\"SELECT ML.title, ML.menu_cat from menu_privilege_entity as MP INNER join menu_link_entity as ML on MP.link = ML.link where MP.user_role = '$user_role' and ML.link = '/$uri'\");\n    }\n\n    public function getPrivilegeMenu($user_role)\n    {\n        return DB::select(\"select M.*, mce.cat_icon, mce.cat_link, mle.menu_cat, mle.title from menu_category_entity as mce INNER  join menu_link_entity as mle on mce.menu_cat = mle.menu_cat INNER join menu_item_entity as M on mle.link = M.link INNER JOIN menu_privilege_entity as mpe on M.link = mpe.link  where mce.active = 1 and M.active = 1 and mpe.user_role = '$user_role' GROUP by mle.title  order by  mce.order_id,  M.menu_order\");\n    }\n\n    public function getUnreadMessages($limit)\n    {\n        return DB::select(\"SELECT U.fullname, C.message, C.created_at, C.support_id from support_entity as C INNER join user_entity as U on C.email = U.email where read_status = 0 ORDER by C.created_at desc LIMIT $limit\");\n    }\n\n    public function getPendingTransactions($limit)\n    {\n        return DB::select(\"SELECT U.fullname, S.sub_name, V.amount, V.created_at, V.ref from voucher_entity as V INNER join sub_product_entity as S on V.sub_prod_id = S.sub_prod_id INNER join user_entity as U on V.email = U.email WHERE V.approvalStatus = 0 order by V.created_at desc LIMIT $limit\");\n    }\n\n    public function getTransactionDetailById($arg)\n    {\n        return DB::selectOne(\"SELECT U.fullname, V.*, S.sub_name, P.product_name, P.product_icon, P.product_description, C.per_charges from voucher_entity as V INNER join user_entity as U on V.email = U.email INNER join sub_product_entity as S on V.sub_prod_id = S.sub_prod_id INNER join product_entity as P on S.product_id = P.product_id INNER join conversion_rate_entity as C on S.conversion_id = C.conversion_id where V.ref = ?\", array($arg));\n    }\n\n    public function getMessageList($email)\n    {\n        return DB::select(\"SELECT C.*, U.fullname, U.image_url, (SELECT count(*) FROM reply_entity as R where R.support_id = C.support_id and R.email <> ? and R.read_status = 0) as un_read FROM support_entity as C INNER join user_entity as U ON C.email = U.email ORDER by un_read DESC, created_at DESC\", array($email));\n    }\n\n    public function getMessageDetail($support_id)\n    {\n        return DB::selectOne(\"SELECT C.*, U.fullname, U.phoneno, U.userRole, U.image_url FROM support_entity as C INNER join user_entity as U ON C.email = U.email where C.support_id = '$support_id'\");\n    }\n\n    public function getProductTransHistory($email)\n    {\n       return DB::select(\"SELECT V.*, S.sub_name, P.product_name, P.product_icon, P.product_description, P.service_id FROM voucher_entity as V INNER join sub_product_entity as S on V.sub_prod_id = S.sub_prod_id INNER join product_entity as P on S.product_id = P.product_id where V.email = ? order by V.created_at desc\", array($email));\n    }\n\n    public function updateUserToken($inputs, $email)\n    {\n        $this->table->updateTable('user_entity', 'email', $email, [\"token\" => $inputs['token']]);\n    }\n\n    public function sendSupportMsg($inputs)\n    {\n        $data = [\n            'support_id' => $inputs['support_id'],\n            'email' => $inputs['email'],\n            'priority' => $inputs['priority'],\n            'message' => $inputs['message'],\n        ];\n        $this->table->insertNewEntry('support_entity', 'support_id', $data, null, null, false);\n    }\n\n    public function postTransaction($inputs, $user, $subProduct)\n    {\n        $addon_code = $inputs['addon_code'] ?? \"\";\n        switch ($inputs['service_id']){\n            case Services::Airtime2Cash:\n                $amount = $inputs['amount'];\n                $inputs['channel_name'] = PaymentMethod::Bank;\n                break;\n            default:\n                if(!empty($addon_code)) $addon = $this->getAddonByCode($addon_code);\n                $user_amount = $user->userRole == UserRoles::agent ? $subProduct->sub_res_price : $subProduct->sub_price;\n                $amount = $user_amount == 0 ? $inputs['amount'] : ($user_amount * $subProduct->period);\n                $amount = isset($addon) ? ($amount + $addon['addon_price']) : $amount;\n                $inputs['channel_name'] = PaymentMethod::Wallet;\n                break;\n        }\n\n        $transaction = [\n            'email' => $user->email,\n            'sub_prod_id' => $subProduct->sub_prod_id,\n            'cr_acc' => $inputs['cr_acc'] ?? \"\",\n            'dr_acc' => $inputs['dr_acc'] ?? \"\",\n            'amount' => $amount,\n            'cardPin' => $inputs['cardPin'] ?? \"\",\n            'approvalStatus' => RequestStatus::Pending,\n            'acc_no' => $inputs['acc_no'] ?? \"\",\n            'narration' => $inputs['narration'] ?? \"\",\n            'discount_code' => $inputs['discount_code'] ?? \"\",\n            'mac_address' => $inputs['mac_address'] ?? '',\n            'ip_address' => $inputs['ip_address'] ?? '',\n            'latitude' => $inputs['latitude'] ?? 0.0,\n            'longitude' => $inputs['longitude'] ?? 0.0,\n            'addon_code' => $addon_code,\n            'channel_name' => $inputs['channel_name'],\n            'platform' => $inputs['platform'] ?? 'Android',\n        ];\n        return $this->table->createRecord('voucher_entity', 'ref', $transaction);\n    }\n\n    public function getProductsByServiceId($DATA_SERVICE)\n    {\n        $where = [['service_id', '=', $DATA_SERVICE]];\n        return $this->table->getItemListWithWhere('product_entity', 'product_id', $where);\n    }\n\n    public function getSubProductDetail($sub_prod_id)\n    {\n        return $this->table->getSingleItemWithWhere('sub_product_entity', 'sub_prod_id',  [['sub_prod_id', '=', $sub_prod_id]]);\n    }\n\n    public function getWalletTransHistory($arg, $onlyActive = false)\n    {\n        if ($onlyActive)\n            $where = [['email' , '=', $arg], ['status', '=', 1]];\n        else\n            $where = [['email' , '=', $arg]];\n        return $this->table->getItemListWithWhere('wallet_entity', 'id', $where, 'wallet_id');\n    }\n\n    public function postWalletTransaction($input, bool $showMessage = false)\n    {\n        return $this->table->insertNewEntry('wallet_entity', 'id', $input, null, null, $showMessage);\n    }\n\n    public function getWalletTransByPayRef($payment_ref)\n    {\n        $where = [['payment_ref' , '=', $payment_ref]];\n        return $this->table->getSingleItemWithWhere('wallet_entity', 'id', $where);\n    }\n\n    public function updateUserImage($file, $email)\n    {\n        $this->table->updateTable('user_entity', 'email', $email, [], $file, $this->getRef());\n    }\n\n    public function sendPushNotification(string $code,  $title,  $message, array $registrationIDs = null, string $topic = null, $data = null)\n    {\n        if(($registrationIDs == null || sizeof($registrationIDs) == 0) && $topic == null)\n            return null;\n        $url = \"https://fcm.googleapis.com/fcm/send\";\n        $notification = [\n            'title' => $title,\n            'body' =>  $message,\n            'sound' => 'default',\n            'badge' => '1'\n        ];\n        $data_payload = [\n            'data' => $data,\n            'code' => $code\n        ];\n        $arrayToSend = [\n            'to' => $topic,\n            'registration_ids' =>  $registrationIDs,\n            'data' => $data_payload,\n            'notification' => ($title == null && $message == null) ? null : $notification,\n            'priority'=>'high'\n        ];\n        $client = new Client();\n        $result = $client->post( $url, [\n            'json'    =>  $arrayToSend,\n            'headers' => [  'Authorization' => 'key='. config('app.fcm'),  'Content-Type'  => 'application/json' ],\n        ] );\n        $response = $result->getBody();\n        return json_decode( $response, true );\n    }\n\n    public function sendPostedTransNotifications($transaction)\n    {\n        try {\n            $tokens = $this->getAdminTokens();\n            $message = \"You have a new request from : \" . $transaction->email;\n            $this->sendPushNotification(\"03\", 'New Request',  $message  , $tokens, null, $transaction);\n            $this->sendReceiptByMail($transaction, \"Transaction Receipt\", array($transaction->email));\n            return  'Notification sent';\n        }catch (\\Exception $e){\n            return $e->getMessage();\n        }\n    }\n\n    private function sendReceiptByMail($transaction, $subject, array $emails)\n    {\n       $data = ['trans' => $transaction];\n       $this->sendMail('emails.transaction_receipt', $emails, $subject, $this->cc, $data );\n    }\n\n    public function getFaqCatList($onlyActive)\n    {\n        return $this->table->getItemList('faq_cat_entity', 'faq_cat', $onlyActive);\n    }\n\n    public function getWalletBalanceList()\n    {\n        return DB::select(\"SELECT U.fullname, U.phoneno, U.email, sum(case when W.trans_type = 'DR' THEN -W.amount else W.amount end) as wallet_balance FROM `wallet_entity` as W INNER JOIN user_entity as U on W.email = U.email WHERE W.status = 1 GROUP by W.email order  by W.created_at desc limit ?\", array($this->limit));\n    }\n\n    public function getPromoProducts()\n    {\n        return DB::select(\"SELECT * from product_entity where service_id  <> ?\", array(\"RE_SA_01\"));\n    }\n\n    public function synchronizeBank()\n    {\n        $url = \"https://api.paystack.co/bank\";\n        $client = new Client();\n        $result = $client->get( $url, ['headers' => [ 'Content-Type' => 'application/json', 'Authorization' => 'Bearer '.config('app.paystack')]]);\n        $banks = json_decode( $result->getBody());\n        if($banks->status){\n            $data = $banks->data;\n            foreach ($data as $item){\n                $this->table = new TableEntity();\n                $bank = $this->table->getSingleItem('bank_entity', 'bank_code', $item->code);\n                $inputs = [\n                    'bank_code' => $item->code,\n                    'bank_name' => $item->name,\n                ];\n                if($bank == null){\n                    $this->table->insertNewEntry('bank_entity', 'bank_code', $inputs);\n                }\n                else{\n                    $this->table->updateTable('bank_entity', 'bank_code', $bank->code, $inputs);\n                }\n            }\n        }\n    }\n\n    public function validateDiscountCode($email, $sub_prod_id, $code)\n    {\n        return DB::selectOne(\"SELECT A.* from (SELECT D.percentage, D.discount_code, D.usage_number, (SELECT COUNT(discount_code) from voucher_entity where discount_code = D.discount_code and email = ?) as usage_count from discount_entity as D INNER join sub_product_entity as S on S.sub_prod_id = ? inner join product_entity as P on S.product_id = D.product_id WHERE D.discount_code = ? and D.active = 1 and D.expiry_date >= date(now()) AND D.usage_number > 0 GROUP by S.sub_prod_id) as A where A.usage_count < A.usage_number\", array($email, $sub_prod_id, $code));\n    }\n\n    public function getSalesInsight()\n    {\n        return DB::select(\"SELECT SE.service_name, count(V.ref) as counter, sum(V.amount) as total, SE.service_id from voucher_entity as V inner JOIN sub_product_entity as S on V.sub_prod_id = S.sub_prod_id inner join product_entity as P on S.product_id = P.product_id INNER join services_entity as SE on P.service_id = SE.service_id where V.approvalStatus = 1 GROUP by SE.service_id\");\n    }\n\n    public function queryTransactionsByServiceId($service_id)\n    {\n        return DB::select(\"SELECT V.*, U.fullname, S.sub_name FROM voucher_entity as V INNER JOIN user_entity as U on V.email = U.email INNER join sub_product_entity as S on V.sub_prod_id = S.sub_prod_id INNER join product_entity as P on S.product_id = P.product_id where approvalStatus = 1 and P.service_id = ? order by V.created_at desc limit ?\", array($service_id, $this->limit));\n    }\n\n    public function billPaymentReQuery($payment_ref)\n    {\n        try {\n            $client = new Client();\n            $result = $client->post('https://www.api.ringo.ng/api/b2brequery', [\n                'json' => [\n                    'request_id' => $payment_ref\n                ],\n                'headers' => [ 'Content-Type' => 'application/json', 'email' => config('app.ringo_email'), 'password' => config('app.ringo_password')],\n            ] );\n            return json_decode( $result->getBody(), true );\n        }catch (\\GuzzleHttp\\Exception\\RequestException $exception){}\n    }\n\n    public function getCardPayments()\n    {\n        return DB::select(\"SELECT W.*, U.fullname, U.phoneno FROM `wallet_entity` as W INNER join user_entity as U on W.email = U.email WHERE channel_name = 'Paystack' order  by W.created_at DESC limit ?\", array($this->limit));\n    }\n\n    public function getReferralDetailByCode($ref_code)\n    {\n        return DB::selectOne(\"SELECT U.*, R.ref_code from referral_entity as R inner JOIN user_entity as U on R.email = U.email WHERE R.ref_code = ?\", array($ref_code));\n    }\n\n    public function getAllProducts()\n    {\n        return $this->table->getItemList('product_entity', 'product_id', true);\n    }\n\n    public function filterTransactions($inputs = [])\n    {\n        return DB::select(\"SELECT V.*, U.fullname, S.sub_name FROM voucher_entity as V INNER JOIN user_entity as U on V.email = U.email INNER join sub_product_entity as S on V.sub_prod_id = S.sub_prod_id WHERE S.product_id = ? and V.approvalStatus = ? and date(V.created_at) BETWEEN ? and ? order by V.created_at desc\", array_values($inputs));\n    }\n\n    public function getAccountReserved($email)\n    {\n        $user = $this->getUserByEmail($email);\n        if($user->account_number == null || $user->account_number == '')\n            return $this->reserveAccount($user);\n        else\n            return $user->account_number;\n    }\n\n    public function paystackPaymentNotification($inputs)\n    {\n        if($inputs['event'] == 'charge.success'){\n            $paystackData = $inputs['data'];\n            $data = [\n                'trans_ref' => $paystackData['reference'],\n                'amount' => $paystackData['amount'] / 101.5,\n                'payment_method' => $paystackData['channel'],\n                'gateway' => PaymentMethod::Paystack,\n                'narration' => $paystackData['gateway_response'],\n                'email' => $paystackData['customer']['email'],\n                'status' => $paystackData['status'],\n            ];\n            $this->table->insertNewEntry('payment_notification_entity', 'trans_ref', $data);\n        }\n        return new JsonResponse(\"00\", \"Notified Successfully\");\n    }\n\n    public function monifyPaymentNotification($inputs)\n    {\n        $hash = $this->calculateHashValue($inputs);\n        if(hash_equals($inputs['transactionHash'], $hash)){\n            $data = [\n                'trans_ref' => $inputs['transactionReference'],\n                'amount' => $inputs['amountPaid'],\n                'payment_method' => $inputs['paymentMethod'],\n                'narration' => $inputs['paymentDescription'],\n                'email' => $inputs['customer']['email'],\n                'status' => $inputs['paymentStatus'],\n                'gateway' => PaymentMethod::Monify\n            ];\n            $this->table->insertNewEntry('payment_notification_entity', 'trans_ref', $data);\n            return new JsonResponse(\"00\", \"Notified Successfully\");\n        }\n        else\n            return new JsonResponse(\"-01\", \"Invalid hash\");\n    }\n\n    public function monifySettlementNotification(Request $request)\n    {\n        $inputs = json_decode($request->getContent(), true);\n\n        if($request->getUser() == config('app.monify_username') && $request->getPassword() == config('app.monify_password')){\n            $data = [\n                'trans_ref' => $inputs['settlementReference'],\n                'amount' => $inputs['amount'],\n                'acct_num' => $inputs['destinationAccountNumber'],\n                'acct_name' => $inputs['destinationAccountName'],\n                'bank_code' => $inputs['destinationBankName'],\n                'trans_count' => $inputs['transactionsCount'],\n            ];\n            $this->table->insertNewEntry('settlement_notification_entity', 'trans_ref', $data);\n            return new JsonResponse(\"00\", \"Notified Successfully\");\n        }\n        else\n            return new JsonResponse(\"-01\", \"Invalid Username & Password\");\n    }\n\n    public function getMonifyTransList()\n    {\n        $where = [['gateway', '=', PaymentMethod::Monify]];\n        return $this->table->getItemListWithWhere('payment_notification_entity', 'trans_ref', $where);\n    }\n\n    public function getSettlements()\n    {\n        return $this->table->getItemList('settlement_notification_entity', 'trans_ref');\n    }\n\n    public function getUsersByStatus(int $status)\n    {\n        return DB::select(\"SELECT * from user_entity where active = ? ORDER by created_at DESC limit ?\", array($status, $this->limit));\n    }\n\n    public function getPaymentChannels()\n    {\n        return $this->table->getItemList('payment_channel_entity', 'channel_name', true);\n    }\n\n    public function filterPayments($inputs)\n    {\n        return DB::select(\"SELECT W.*, U.fullname FROM wallet_entity as W INNER JOIN user_entity as U on W.email = U.email WHERE W.channel_name = ? and W.status = ? and date(W.created_at) BETWEEN ? and ? order by W.created_at desc\", array_values($inputs));\n    }\n\n    public function filterPayouts($inputs)\n    {\n        return DB::select(\"SELECT W.*, U.fullname FROM wallet_entity as W INNER JOIN user_entity as U on W.email = U.email WHERE W.narration = 'Payout / Withdrawal' and W.status = ? and date(W.created_at) BETWEEN ? and ? order by W.created_at desc\", array_values($inputs));\n    }\n\n    public function getAirtime2CashAvailBal($email)\n    {\n        return DB::selectOne('select  GetA2CWithdrawalBalance(?) as balance', array($email))->balance;\n    }\n\n    public function reQueryReservedAccount($user)\n    {\n        try {\n            $client = new Client();\n            $result = $client->get( config(\"app.monify_url\") . 'bank-transfer/reserved-accounts/'. $user->phoneno, [\n                'headers' => [\n                    'Content-Type' => 'application/json',\n                    'Authorization' => \"Bearer \" . $this->getAccessToken(),\n                ],\n            ]);\n            $response = json_decode( $result->getBody(), true );\n            if($response['requestSuccessful']){\n                $this->updateProvidusAcct($response, $user->email);\n            }\n            return $response;\n        }catch (\\GuzzleHttp\\Exception\\RequestException $exception){\n            return null;\n        }\n    }\n\n\n    public function getLastTransaction($email)\n    {\n        return DB::selectOne(\"SELECT U.fullname, V.*, S.sub_name, P.product_name, P.product_icon, P.product_description, C.per_charges from voucher_entity as V INNER join user_entity as U on V.email = U.email INNER join sub_product_entity as S on V.sub_prod_id = S.sub_prod_id INNER join product_entity as P on S.product_id = P.product_id INNER join conversion_rate_entity as C on S.conversion_id = C.conversion_id where U.email = ? ORDER by V.ref DESC LIMIT 1\", array($email));\n    }\n\n\n    private function getAdminEmails()\n    {\n        $registrationIDs = DB::select(\"SELECT email from user_entity where userRole = 'Admin' and token <> '' \");\n        $arr = [];\n        foreach ($registrationIDs as $reg)\n            $arr[] = $reg->email;\n        return $arr;\n    }\n\n    private function getAdminTokens()\n    {\n        $registrationIDs = DB::select(\"SELECT token from user_entity where userRole = 'Admin' and token <> '' and email <> 'adex9ja2@gmail.com' \");\n        $arr = [];\n        foreach ($registrationIDs as $reg)\n            $arr[] = $reg->token;\n        return $arr;\n    }\n\n    public function sendFundWalletNotification($transaction, $payment_method, $subject)\n    {\n        $user = $this->getUserByEmail($transaction['email']);\n        $data = ['trans' => $transaction, 'fullname' => $user['fullname'], 'payment_method' => $payment_method];\n        $this->sendMail('emails.fund_wallet_receipt', array($transaction['email']), $subject, $this->cc, $data );\n        $message = $transaction['narration']. ' NGN'. $transaction['amount'];\n        $this->sendPushNotification('07', 'Fund Wallet', $message , array($user['token']), null, $transaction);\n    }\n\n    public function getPushNotifications()\n    {\n        return $this->table->getItemList('notification_entity');\n    }\n\n    public function publishNewPushNotification($inputs, $email)\n    {\n        $inputs['email'] = $email;\n        $this->sendGeneralNotification($inputs);\n        return $this->table->insertNewEntry('notification_entity', 'id', $inputs);\n    }\n\n    public function resendPushNotification($arg)\n    {\n        $notification = $this->table->getSingleItem('notification_entity', 'id', $arg);\n        $notification['created_at'] = $this->getCurrentDate();\n        $this->sendGeneralNotification($notification);\n    }\n\n    private function sendGeneralNotification($notification){\n        $this->sendPushNotification(\"04\", null, null, null, $this->general_push_topic, $notification);\n    }\n\n    public function updateProfileDocument($file, $email, $doc_type)\n    {\n        $this->table->updateTable('user_entity', 'email', $email, ['doc_type' => $doc_type], $file, $this->getRef(), 'doc_url');\n    }\n\n    public function verifyBvn($inputs)\n    {\n        try {\n            $phone = $inputs['bvn_phone'];\n            $dob  =  $inputs['bvn_dob'];\n            $bvn_number =  $inputs['bvn_number'];\n            $bvn = $this->getBvnDetail($bvn_number);\n            if($bvn != null)\n                return $bvn->bvn_phone == $phone && $bvn->bvn_dob == $dob;\n            else{\n                $url = \"https://api.paystack.co/bank/resolve_bvn/\".$bvn_number;\n                $client = new Client();\n                $result = $client->get( $url, ['headers' => [ 'Content-Type' => 'application/json', 'Authorization' => 'Bearer '.config('app.paystack')]]);\n                $bvn = json_decode( $result->getBody());\n                if($bvn->status){\n                    $bvnInput['bvn_phone'] = $bvn->data->mobile;\n                    $bvnInput['bvn_dob'] = $bvn->data->formatted_dob;\n                    $bvnInput['bvn_number'] = $bvn_number;\n                    $bvnInput['first_name'] = $bvn->data->first_name;\n                    $bvnInput['last_name'] = $bvn->data->last_name;\n                    $this->table->insertNewEntry('bvn_entity', 'bvn_number', $bvnInput);\n                    return $bvnInput['bvn_phone'] == $phone && $bvnInput['bvn_dob'] == $dob;\n                }\n                return false;\n            }\n\n        }catch (\\GuzzleHttp\\Exception\\RequestException $exception){}\n    }\n\n    public function sendBulkSms($input)\n    {\n        $response = $this->sendSMS( $input['message'], $input['phone']);\n        $input['response'] = $response;\n        $input['email'] = Auth::user()->email;\n        $this->table->insertNewEntry('sms_entity', 'id', $input);\n        return $response;\n    }\n\n    private function sendSMS($message, $phone)\n    {\n        $url = \"http://www.daftsms.com/sms_api.php?username=\". config('app.sms_username').\"&password=\". config('app.sms_password'). \"&sender=AirtimeData&dest=\". $phone .\"&msg=\".$message;\n        $client = new Client();\n        $request = $client->get($url);\n        return $request->getBody()->getContents();\n    }\n\n    public function getBulkSmsBalance()\n    {\n        $url = \"http://www.daftsms.com/sms_api.php?meg_report=balance&username=\". config('app.sms_username') .\"&password=\". config('app.sms_password');\n        $client = new Client();\n        $request = $client->get($url);\n        return $request->getBody()->getContents();\n    }\n\n    public function getBulkSmsStat()\n    {\n        return DB::selectOne(\"SELECT (SELECT COUNT(response) from sms_entity where response = '146') as success, (SELECT COUNT(response) from sms_entity where response <> '146') as fail\");\n    }\n\n    public function getFaqList($onlyActive = false)\n    {\n        return $this->table->getItemList('faq_entity', 'id', $onlyActive);\n    }\n\n    public function getFaqById($arg)\n    {\n        return $this->table->getSingleItem('faq_entity', 'id', $arg);\n    }\n\n    public function deactivateFaq($arg)\n    {\n        return $this->table->deactivate('faq_entity', 'id', $arg);\n    }\n\n    public function updateFaq($inputs, $arg)\n    {\n        return $this->table->updateTable('faq_entity', 'id', $arg, $inputs);\n    }\n\n    public function saveFaq($input)\n    {\n        return $this->table->insertNewEntry('faq_entity', 'id', $input);\n    }\n\n    public function getReferralByEmail($arg)\n    {\n        return $this->table->getSingleItem('referral_entity', 'email', $arg);\n    }\n\n    public function verifyPaymentReference($reference)\n    {\n        $url = \"https://api.paystack.co/transaction/verify/\" . rawurlencode($reference);\n        $client = new Client();\n        $result = $client->get( $url, ['headers' => [ 'Content-Type' => 'application/json', 'Authorization' => 'Bearer '.config('app.paystack')]]);\n        return json_decode( $result->getBody());\n    }\n\n    public function saveReferralCode($inputs)\n    {\n        return $this->table->insertNewEntry('referral_entity', 'ref_code', $inputs);\n    }\n\n    public function genReferralCode($email, $reference )\n    {\n        $len = strlen($reference);\n        return substr($email, 0, 3). substr($reference, ($len - 4), ($len -1));\n    }\n\n    public function getPromoCodes()\n    {\n        return $this->table->getItemList('discount_entity', 'discount_code', true);\n    }\n\n    public function genPromoCode($len)\n    {\n        $chars = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n        $res = \"\";\n        for ($i = 0; $i < $len; $i++) {\n            $res .= $chars[mt_rand(0, strlen($chars)-1)];\n        }\n        return $res;\n    }\n\n    public function savePromoCode($input)\n    {\n        return $this->table->insertNewEntry('discount_entity', 'discount_code', $input);\n    }\n\n    public function getPromoCodeByCode($arg)\n    {\n        return $this->table->getSingleItem('discount_entity', 'discount_code', $arg);\n    }\n\n    public function deactivatePromoCode($arg)\n    {\n        return $this->table->deactivate('discount_entity', 'discount_code', $arg);\n    }\n\n    public function updatePromoCode($input, $arg)\n    {\n        return $this->table->updateTable('discount_entity', 'discount_code', $arg, $input);\n    }\n\n    public function getReferralList()\n    {\n        return DB::select(\"SELECT R.*, U.fullname, (SELECT sum(case when U2.userRole = ? THEN 1 ELSE 0 END) from user_entity as U2 where U2.ref_code = R.ref_code) as earned, (SELECT count(*) from user_entity as U3 where U3.ref_code = R.ref_code) as referred from referral_entity as R inner join user_entity as U on R.email = U.email\", array(UserRoles::agent));\n    }\n\n    public function getReferralEarnings($ref_code)\n    {\n        return DB::select(\"SELECT W.amount, W.narration, W.payment_ref, U.fullname, W.created_at from wallet_entity as W INNER join referral_entity as R on W.payment_ref = R.reference INNER JOIN user_entity as U on R.email = U.email where U.ref_code = ?\", array($ref_code));\n    }\n\n    public function getPendingPayout($email)\n    {\n        $where = [['email', '=', $email], ['status', '=', 0]];\n        return $this->table->getSingleItemWithWhere('payout_entity', 'payout_id', $where);\n    }\n\n    public function getWalletBalance($email)\n    {\n        return DB::selectOne('select  GetWalletBalance(?) as balance', array($email))->balance;\n    }\n\n    public function savePayoutRequest($inputs)\n    {\n        $this->table->insertNewEntry('payout_entity', 'payout_id', $inputs);\n    }\n\n    public function getPayoutRequestById($payout_id)\n    {\n        return  DB::selectOne(\"SELECT P.*, B.bank_name, UB.acc_name FROM payout_entity as P INNER join user_bank_entity as UB on P.acc_no = UB.acc_no INNER join bank_entity as B on UB.bank_code = B.bank_code where P.payout_id = ?\", array($payout_id));\n    }\n\n    public function sendPayoutRequestNotification($payoutRequest, $subject = 'Payout Request')\n    {\n        $tokens = $this->getAdminTokens();\n        $user = $this->getUserByEmail($payoutRequest->email);\n        $tokens[] = $user['token'];\n        $message = \"NGN\" . $payoutRequest->amount . \" payout request \" . RequestStatus::getReqTitle($payoutRequest->status);\n        $data = ['payoutRequest' => $payoutRequest];\n        $this->sendPushNotification(\"05\", 'Payout Request', $message, $tokens, null, $payoutRequest);\n        $this->sendMail('emails.withdraw_wallet_receipt', array($user['email']), $subject, $this->cc , $data );\n    }\n\n    public function getPayoutRequests()\n    {\n        return DB::select(\"SELECT P.*, B.bank_name, UB.acc_name FROM payout_entity as P INNER join user_bank_entity as UB on P.acc_no = UB.acc_no INNER join bank_entity as B on UB.bank_code = B.bank_code ORDER by P.created_at DESC limit ?\", array($this->limit));\n    }\n\n    public function updatePayout($arg, $value)\n    {\n        $pendingRequest = $this->getPayoutRequestById($arg);\n        $pendingRequest->status = $value;\n        $this->sendPayoutRequestNotification($pendingRequest, RequestStatus::getReqTitle($value). ' Payout Request');\n        return $this->table->updateTable('payout_entity', 'payout_id', $arg, ['status' => $value]);\n    }\n\n    public function getWalletTrans()\n    {\n        return DB::select(\"SELECT W.*, V.approval_officer from wallet_entity as W LEFT join voucher_entity as V on W.payment_ref = V.ref order by W.created_at DESC limit ?\", array($this->limit));\n    }\n\n    public function sendRegMail($user)\n    {\n        $data = ['fullname' => $user->fullname, 'email' => $user->email];\n        $this->sendMail('emails.registration_mail', array($user->email), 'New Registration', [], $data );\n    }\n\n    public function saveBankTransfer($inputs)\n    {\n        $this->table->insertNewEntry('bank_transfer_entity', 'payment_ref', $inputs);\n    }\n\n    public function getBankPaymentRef($payment_ref)\n    {\n        return $this->table->getSingleItemWithWhere('bank_transfer_entity', 'payment_ref', [['payment_ref', '=', $payment_ref]]);\n    }\n\n    public function transferFund($inputs)\n    {\n        $data = [\n            'email' => $inputs['receiver_email'],\n            'amount' => $inputs['amount'],\n            'narration' => 'Fund Transfer',\n            'status' => 1,\n            'channel_name' => PaymentMethod::Wallet,\n            'trans_type' => TransactionType::CR,\n            'payment_ref' => $inputs['payment_ref']\n        ];\n        $this->postWalletTransaction($data);\n        $this->table = new TableEntity();\n        $data['email'] = $inputs['sender_email'];\n        $data['trans_type'] = TransactionType::DR;\n        $data['payment_ref'] = 'D'.$inputs['payment_ref'];\n        $this->postWalletTransaction($data);\n    }\n\n    public function sendWalletTransferNotification($walletTrans, $sender_email, $receiver_email)\n    {\n        $sender = $this->getUserByEmail($sender_email);\n        $receiver  = $this->getUserByEmail($receiver_email);\n        $this->sendWalletTransferMail($walletTrans, $sender, $receiver);\n        $this->sendWalletTransferPushNotification($walletTrans, $sender, $receiver);\n\n    }\n\n    private function sendWalletTransferMail($walletTrans, $sender, $receiver)\n    {\n        $receivers = [];\n        $receivers[]  = $sender['email'];\n        $receivers[]  = $receiver['email'];\n        $data = ['trans' => $walletTrans, 'sender' => $sender, 'receiver' => $receiver];\n        $this->sendMail('emails.wallet_transfer_receipt', $receivers, 'Fund Transfer', [], $data );\n    }\n\n    private function sendWalletTransferPushNotification($walletTrans, $sender, $receiver)\n    {\n        $tokens = [];\n        $tokens[] = $sender['token'];\n        $tokens[] = $receiver['token'];\n        $message = \"Wallet Transaction  NGN\". $walletTrans['amount'];\n        $this->sendPushNotification(\"06\", 'Wallet Transaction', $message,  $tokens, null, $walletTrans);\n    }\n\n    public function getUserByEmailPhoneBvn($phone_email_bvn)\n    {\n        return DB::selectOne(\"select * from user_entity where email = '$phone_email_bvn' or phoneno = '$phone_email_bvn' or bvn_number = '$phone_email_bvn'\");\n    }\n\n    public function getBankTransfers()\n    {\n        return $this->table->getItemList('bank_transfer_entity', 'payment_ref');\n    }\n\n    public function updateBankTransfer($arg, $value)\n    {\n        $pendingRequest = $this->getBankPaymentRef($arg);\n        $pendingRequest['status'] = $value;\n        $this->sendFundWalletNotification($pendingRequest, PaymentMethod::Bank, 'Update Wallet Funding');\n        return $this->table->updateTable('bank_transfer_entity', 'payment_ref', $arg, ['status' => $value]);\n    }\n\n    public function verifyAccountNumber($inputs)\n    {\n        try {\n            $url = \"https://api.paystack.co/bank/resolve?account_number=\". $inputs['acc_no'] .\"&bank_code=\". $inputs['bank_code'];\n            $client = new Client();\n            $result = $client->get( $url, ['headers' => [ 'Content-Type' => 'application/json', 'Authorization' => 'Bearer '.config('app.paystack')]]);\n            $acct_resolve = json_decode( $result->getBody());\n            return $acct_resolve;\n        }catch (\\GuzzleHttp\\Exception\\RequestException $exception){}\n    }\n\n    public function generateRef()\n    {\n        return $this->getRef();\n    }\n\n    public function saveUserBank($inputs)\n    {\n        $data = [\n            'active' => ActiveStatus::Active,\n            'email' => $inputs['email'],\n            'acc_no' => $inputs['acc_no'],\n            'bank_code' => $inputs['bank_code'],\n            'acc_name' => $inputs['acc_name'],\n        ];\n        $this->table->insertNewEntry('user_bank_entity', 'acc_no', $data);\n    }\n\n    public function getUserBankByAcctNo($acc_no)\n    {\n        return DB::selectOne(\"SELECT UB.*, B.bank_name FROM user_bank_entity as UB inner join bank_entity as B on UB.bank_code = B.bank_code where  UB.acc_no = ?\", array($acc_no));\n    }\n\n    public function getUserBanksByEmail($arg)\n    {\n        return DB::select(\"SELECT UB.*, B.bank_name FROM user_bank_entity as UB inner join bank_entity as B on UB.bank_code = B.bank_code where UB.email = ?\", array($arg));\n    }\n\n    public function deleteUserBank($acc_no)\n    {\n        return $this->table->deactivate('user_bank_entity', 'acc_no', $acc_no);\n    }\n\n    public function updateUserBankAccount($acc_no, $inputs)\n    {\n        $data = [\n            'active' => ActiveStatus::Active,\n            'email' => $inputs['email'],\n            'bank_code' => $inputs['bank_code'],\n            'acc_name' => $inputs['acc_name'],\n        ];\n        return $this->table->updateTable('user_bank_entity', 'acc_no', $acc_no, $data);\n    }\n\n    public function saveNewProduct($input, $file)\n    {\n        $ref = $this->getRef();\n        $input['product_id'] = $ref;\n        return $this->table->insertNewEntry('product_entity', 'product_id', $input, $file, $ref, true, 'product_icon');\n    }\n\n    public function getProductById($product_id)\n    {\n        return $this->table->getSingleItem('product_entity', 'product_id', $product_id );\n    }\n\n    public function saveNewSubProduct($input)\n    {\n        $input['sub_prod_id'] = $this->getRef();\n        $input['conversion_id'] = \"FREE_001\";\n        return $this->table->insertNewEntry('sub_product_entity', 'sub_prod_id', $input);\n    }\n\n    public function updateSubProduct($inputs)\n    {\n        $sub_prod_id = $inputs['sub_prod_id'];\n        return $this->table->updateTable('sub_product_entity', 'sub_prod_id', $sub_prod_id, $inputs);\n    }\n\n    public function saveBanks($inputs)\n    {\n        $count = 0;\n        foreach ($inputs as $input){\n            $count++;\n            $this->table = new TableEntity();\n            $bank = [];\n            $bank['bank_code'] = $input['Code'];\n            $bank['bank_name'] = $input['Name'];\n            $this->table->insertNewEntry('bank_entity', 'bank_code', $bank);\n        }\n        return $count;\n    }\n\n    public function updateSubProductStatus($arg, int $status)\n    {\n        if($status == ActiveStatus::InActive)\n            return $this->table->deactivate('sub_product_entity', 'sub_prod_id', $arg );\n        else\n            return $this->table->activate('sub_product_entity', 'sub_prod_id', $arg );\n    }\n\n    public function updateProductStatus($arg, int $DeActivated)\n    {\n        if($DeActivated == ActiveStatus::InActive)\n            return $this->table->deactivate('product_entity', 'product_id', $arg );\n        else\n            return $this->table->activate('product_entity', 'product_id', $arg );\n    }\n\n    private function genAwtToken($user){\n        $header = json_encode(['typ' => 'JWT', 'alg' => 'HS256']);\n\n        $payload = json_encode([ 'email' => $user->email, 'fullname' => $user->fullname, 'phoneno' => $user->phoneno ]);\n\n        $base64UrlHeader = str_replace(['+', '/', '='], ['-', '_', ''], base64_encode($header));\n\n        $base64UrlPayload = str_replace(['+', '/', '='], ['-', '_', ''], base64_encode($payload));\n\n        $signature = hash_hmac('sha256', $base64UrlHeader . \".\" . $base64UrlPayload, config('app.key'), true);\n\n        $base64UrlSignature = str_replace(['+', '/', '='], ['-', '_', ''], base64_encode($signature));\n\n        return $base64UrlHeader . \".\" . $base64UrlPayload . \".\" . $base64UrlSignature;\n    }\n\n    public function addJwtToUser($user)\n    {\n        $token = $this->genAwtToken($user);\n        $user->auth_token = $token;\n        return $user;\n    }\n\n    public function getEmailFromJwt(Request $request)\n    {\n        $sections = explode('.', $request->header('authorization'));\n        $base64UrlPayload = str_replace(['-', '_', ''], ['+', '/', '='],  $sections[1]);\n        $user = json_decode(base64_decode($base64UrlPayload));\n        return $user->email;\n    }\n\n    public function verifyJwtToken($authorization)\n    {\n        if($authorization != null){\n            $sections = explode('.', $authorization);\n            $signature = hash_hmac('sha256', $sections[0] . \".\" . $sections[1], config('app.key'), true);\n            $base64UrlSignature = str_replace(['+', '/', '='], ['-', '_', ''], base64_encode($signature));\n            return $base64UrlSignature == $sections[2];\n        }\n        else\n            return false;\n\n    }\n\n    public function updateUserEmailVerification(string $email)\n    {\n        $this->table->updateTable('user_entity', 'email', $email, ['is_email_verified' => 1]);\n    }\n\n    public function getMessageReplies($arg)\n    {\n        return DB::select(\"SELECT R.*, U.fullname, U.image_url from reply_entity as R INNER join user_entity as U on R.email = U.email where R.support_id = ?\", array($arg));\n    }\n\n    public function saveMessageReply(array $inputs, $email, $reply_id, $file = null)\n    {\n        $inputs['reply_id'] = $reply_id;\n        $inputs['email'] = $email;\n        $this->table->insertNewEntry('reply_entity', 'support_id', $inputs, $file, $inputs['reply_id'], false, 'file_link' );\n    }\n\n    public function getSupportMsgById($support_id)\n    {\n        return $this->table->getSingleItem('support_entity', 'support_id', $support_id);\n    }\n\n    public function getMySupportMessages($email)\n    {\n        return DB::select(\"SELECT C.*, U.fullname, U.image_url, (SELECT count(*) FROM reply_entity as R where R.support_id = C.support_id and R.email <> ? and R.read_status = 0) as un_read FROM support_entity as C INNER join user_entity as U ON C.email = U.email where C.email = ? ORDER by un_read DESC, created_at DESC\", array($email, $email));\n    }\n\n    public function updateMessageReadFlag($support_id, $email)\n    {\n        DB::update(\"UPDATE reply_entity set read_status = 1 where support_id = ? and email <> ?\", array($support_id, $email));\n        DB::update(\"UPDATE support_entity set read_status = 1 where support_id = ?\", array($support_id));\n    }\n\n    public function getMsgReplyById($reply_id)\n    {\n        return DB::selectOne(\"SELECT R.*, U.image_url, U.fullname from reply_entity as R INNER JOIN user_entity as U on R.email = U.email where R.reply_id = ?\", array($reply_id));\n    }\n\n    public function updateThreadStatus($support_id, $ticket_status)\n    {\n        return $this->table->updateTable('support_entity', 'support_id', $support_id, ['ticket_status' => $ticket_status]);\n    }\n\n    public function sendSupportReplyPushNotification(string $reply_id)\n    {\n        $user = DB::selectOne(\"SELECT U.token, R.reply_message from reply_entity as R inner join support_entity as S on R.support_id = S.support_id inner join user_entity as U on S.email = U.email where R.reply_id = ?\", array($reply_id));\n        $reply = $this->getMsgReplyById($reply_id);\n        $this->sendPushNotification(\"08\", 'New Reply', $reply->reply_message, array($user->token), null, $reply);\n    }\n\n    public function getServices()\n    {\n        return $this->table->getItemListWithWhere('services_entity', 'services_id', null);\n    }\n\n    public function getAppSettings()\n    {\n        return $this->table->getItemList('settings_entity', 'settings_id');\n    }\n\n    public function updateAppSettings($inputs)\n    {\n        foreach ($inputs as $key => $value){\n            $data = ['settings_id' => $key, 'settings_desc' => $value];\n            $this->table->updateTable('settings_entity', 'settings_id', $key, $data);\n        }\n\n    }\n\n    public function sendMailToSpecifiedUsers($inputs)\n    {\n        $to =[]; $cc =[];\n\n        if(isset($inputs['to'])){\n            $str = implode(',', $inputs['to']);\n            $to_emails = DB::select(\"SELECT email from user_entity where userRole in (?)\", array($str));\n            foreach ($to_emails as $item){\n                if (filter_var($item->email, FILTER_VALIDATE_EMAIL))\n                    $to[] = $item->email;\n            }\n        }\n        if(isset($inputs['cc'])){\n            $str = implode(',', $inputs['cc']);\n            $cc_emails = DB::select(\"SELECT email from user_entity where userRole in (?)\", array($str));\n            foreach ($cc_emails as $item){\n                if (filter_var($item->email, FILTER_VALIDATE_EMAIL))\n                    $cc[] = $item->email;\n            }\n        }\n        $data = ['rawMessage' => $inputs['message']];\n        $this->sendMail('emails.broadcast_mail', $to, $inputs['subject'], $cc, $data);\n        $inputs['msg_to'] = implode(',', $inputs['to']);\n        $inputs['msg_cc'] = isset($inputs['cc']) ? implode(',', $inputs['cc']) : '';\n        unset($inputs['to']);\n        unset($inputs['cc']);\n        $inputs['email'] = Auth::user()->email;\n        return $this->table->insertNewEntry('mail_entity', 'id', $inputs);\n    }\n\n    private function sendMail($view, $to, $subject, $cc, $data)\n    {\n       SendMailJob::dispatch($view, $to, $subject, $cc, $data);\n    }\n\n    public function getAllSentMails()\n    {\n        return $this->table->getItemList('mail_entity',  'id', true);\n    }\n\n    public function getDraftMails()\n    {\n        return $this->table->getItemListWithWhere('mail_entity',  'id', ['active' => ActiveStatus::InActive]);\n    }\n\n    public function saveMailDraft($inputs)\n    {\n        unset($inputs['to']);\n        unset($inputs['cc']);\n        $inputs['active'] = ActiveStatus::InActive;\n        $inputs['email'] = Auth::user()->email;\n        return $this->table->insertNewEntry('mail_entity', 'id', $inputs);\n    }\n\n    public function getMailById($arg)\n    {\n        return DB::selectOne(\"SELECT * FROM `mail_entity` as M INNER join user_entity as U on M.email = U.email where M.id = ?\", array($arg));\n    }\n\n    public function synchronizeData()\n    {\n        $client = new Client();\n        $result = $client->get( config('app.sme_plug_url'). 'data/plans', [\n            'headers' => [ 'Content-Type' => 'application/json', 'Authorization' => 'Bearer '. config('app.sme_plug_key')]\n        ]);\n        $response = $result->getBody();\n        $response =  json_decode( $response, true );\n        if($response['status']){\n            $product = [\"1\", \"2\", \"3\", \"4\"];\n            foreach ($product as $index){\n                foreach ($response['data'][$index] as $item){\n                    $sub_prod = $this->table->getSingleItemWithWhere('sub_product_entity', 'sub_prod_id', ['auto_sub_prod_id' => $item['id']]);\n                    if($sub_prod == null){\n                        $productResult = $this->getProductByAutomationId($index);\n                        if($productResult != null){\n                            $entry = [\n                                'auto_sub_prod_id' => $item['id'],\n                                'sub_prod_id' => $this->getRef(),\n                                'sub_price' => $item['price'],\n                                'sub_res_price' => $item['price'],\n                                'product_id' => $productResult->product_id,\n                                'conversion_id' => 'FREE_001',\n                                'active' => 1,\n                                'sub_name' => $item['name'],\n                                'dialog_id' => 'BEN_LAYOUT'\n                            ];\n                            $this->table = new TableEntity();\n                            $this->table->insertNewEntry('sub_product_entity', 'sub_prod_id', $entry);\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    private function getProductByAutomationId($index)\n    {\n        return $this->table->getSingleItemWithWhere('product_entity', 'product_id', ['auto_prod_id' => $index]);\n    }\n\n    private function getCurrentDate()\n    {\n        $now = date(\"Y-m-d H:i:s\");\n        return date(\"Y-m-d H:i:s\", strtotime('+1 hours', strtotime($now)));\n    }\n\n    public function handlesWithdrawalAutomation($payoutRequest)\n    {\n        try {\n            $bank = $this->getUserBankByAcctNo($payoutRequest->acc_no);\n            $client = new Client();\n            $api_key = $this->getMonifyBasicAuth();\n            $result = $client->post( config('app.monify_url'). 'disbursements/single', [\n                'json' =>  [\n                    'reference' => $payoutRequest->payout_id,\n                    'bankCode' => $bank->bank_code,\n                    'accountNumber' => $payoutRequest->acc_no,\n                    'currency' => \"NGN\",\n                    'walletId' => config('app.monify_wallet_id'),\n                    'amount' => ( $payoutRequest->amount - $this->withdrawal_charge ),\n                    'narration' => config('app.name'). ' Payout',\n                ],\n                'headers' => [\n                    'Content-Type' => 'application/json',\n                    'Authorization' => \"Basic \" . $api_key\n                ],\n            ] );\n            $response = json_decode( $result->getBody(), true );\n            $this->withdrawalResponse($response, $payoutRequest->payout_id);\n\n        }catch (\\GuzzleHttp\\Exception\\RequestException $exception){\n            $inputs = [\n                'payment_ref' => $payoutRequest->payout_id,\n                'response' => $exception->getMessage()\n            ];\n            $this->table = new TableEntity();\n            $this->table->insertNewEntry('monify_payment_log_entity', 'payment_ref', $inputs);\n        }\n    }\n\n    private function withdrawalResponse($response, $payout_id)\n    {\n        $inputs = [\n            'payment_ref' => $payout_id,\n            'response' => json_encode($response)\n            ];\n        $this->table->insertNewEntry('monify_payment_log_entity', 'payment_ref', $inputs);\n        $this->updatePayout($payout_id, RequestStatus::Approved);\n    }\n\n    public function validateBillPayment($sub_prod_id, $number)\n    {\n        try {\n            $product = $this->getProductBySubId($sub_prod_id);\n            if($product->auto_prod_id != ''){\n                if($product->auto_prod_id == 'ELECT')\n                    $json = [\n                        'serviceCode' => 'V-ELECT', 'disco' => $product->auto_type,\n                        'type' => $product->auto_sub_prod_id,  'meterNo' => $number\n                    ];\n                elseif ($product->auto_prod_id == 'TV' || $product->auto_prod_id == 'Internet')\n                    $json = [\n                        'serviceCode' => 'V-'. $product->auto_prod_id, 'type' => $product->auto_type,\n                        'smartCardNo' => $number, 'account' => $number\n                    ];\n                else\n                    $json = [\n                        'serviceCode' => \"SRV\",\n                        'account' => $number\n                    ];\n                $client = new Client();\n                $result = $client->post( config('app.ringo_url'), [\n                    'json' =>  $json,\n                    'headers' => [ 'Content-Type' => 'application/json', 'email' => config('app.ringo_email'), 'password' => config('app.ringo_password')],\n                ] );\n                return  json_decode( $result->getBody(), true );\n            }\n            else\n                return null;\n        }catch (\\GuzzleHttp\\Exception\\RequestException $exception){\n            return null;\n        }\n\n    }\n\n    public function handlesServicesAutomation($transaction)\n    {\n        $autoInfo = $this->getAutomationInfo($transaction->ref);\n        if($autoInfo != null){\n            $processed = $this->getAutoProcessingLog($transaction->ref);\n            if($processed == null){\n                $this->insertAutoProcessing($transaction);\n                $accountBal = $this->getWalletBalance($transaction->email);\n                if($accountBal >= $transaction->amount){\n                    switch ($autoInfo->service_id){\n                        case Services::Data_Purchase:\n                            $this->dataPurchaseAutomation($transaction, $autoInfo);\n                            break;\n                        case Services::AirtimePurchase:\n                            $this->airtimeAutomation($transaction, $autoInfo);\n                            break;\n                        case Services::Bill_Payment:\n                            $this->billPaymentAutomation($transaction, $autoInfo);\n                            break;\n                    }\n                }\n                else\n                    $this->updateTransactionStatus($transaction->ref, RequestStatus::Insufficient);\n            }\n\n        }\n    }\n\n    private function getAutomationInfo($ref)\n    {\n        return DB::selectOne(\"SELECT P.service_id,  S.auto_sub_prod_id, P.auto_prod_id, S.sub_price, P.auto_type, S.sub_name, S.period from voucher_entity as V INNER join sub_product_entity as S on V.sub_prod_id = S.sub_prod_id inner join product_entity as P on S.product_id = P.product_id where V.ref = ?\", array($ref));\n    }\n\n    private function dataPurchaseAutomation($transaction, $autoInfo)\n    {\n        try {\n            if($autoInfo->auto_sub_prod_id != ''){\n                $client = new Client();\n                $result = $client->post( config('app.sme_plug_url'). 'data/purchase', [\n                    'json' =>  [\n                        'network_id' => $autoInfo->auto_prod_id,\n                        'plan_id' => $autoInfo->auto_sub_prod_id,\n                        'phone' => $transaction->cr_acc,\n                    ],\n                    'headers' => [ 'Content-Type' => 'application/json', 'Authorization' => 'Bearer '. config('app.sme_plug_key')],\n                ] );\n                $response =  json_decode( $result->getBody(), true );\n                $this->updateSmePlugAutoResponse($response, $transaction);\n            }\n        }catch (\\GuzzleHttp\\Exception\\RequestException $exception){\n            $response = ['status' => false, 'msg' => $exception->getMessage()];\n            $this->updateSmePlugAutoResponse($response, $transaction);\n        }\n    }\n\n    private function airtimeAutomation($transaction, $autoInfo)\n    {\n        try {\n            if($autoInfo->auto_prod_id != ''){\n                $splitted = explode(' ', $autoInfo->sub_name);\n                $amount = $autoInfo->sub_price > 0 ? $splitted[1]  : $transaction->amount;\n                $client = new Client();\n                $result = $client->post( config('app.sme_plug_url'). 'vtu', [\n                    'json' =>  [\n                        'network_id' => $autoInfo->auto_prod_id,\n                        'amount' => $amount,\n                        'phone_number' => $transaction->cr_acc,\n                    ],\n                    'headers' => [ 'Content-Type' => 'application/json', 'Authorization' => 'Bearer '. config('app.sme_plug_key')],\n                ] );\n                $response =  json_decode( $result->getBody(), true );\n                $this->updateSmePlugAutoResponse($response, $transaction);\n            }\n        }catch (\\GuzzleHttp\\Exception\\RequestException $exception){\n            $response = ['status' => false, 'msg' => $exception->getMessage()];\n            $this->updateSmePlugAutoResponse($response, $transaction);\n        }\n\n    }\n\n    private function billPaymentAutomation($transaction, $autoInfo)\n    {\n        try {\n            if($autoInfo->auto_sub_prod_id != ''){\n                $user = $this->getUserByEmailPhoneBvn($transaction->email);\n\n                switch ($autoInfo->auto_prod_id){\n                    case 'ELECT':\n                        $json =  [\n                            'serviceCode' => 'P-ELECT',\n                            'disco' => $autoInfo->auto_type,\n                            'meterNo' => $transaction->cr_acc,\n                            'type' => $autoInfo->auto_sub_prod_id,\n                            'amount' => (int)$transaction->amount,\n                            'phonenumber' => $user->phoneno,\n                            'request_id' => $transaction->ref\n                        ];\n                        $response = $this->makeBillPaymentApiCall($json);\n                        $token = $response['token'] ?? \"\";\n                        break;\n                    case 'TV':\n                        $json =  [\n                            'serviceCode' => 'P-TV',\n                            'type' => $autoInfo->auto_type,\n                            'smartCardNo' => $transaction->cr_acc,\n                            'name' => $autoInfo->sub_name,\n                            'code' => $autoInfo->auto_sub_prod_id,\n                            'period' => $autoInfo->period,\n                            'request_id' => $transaction->ref,\n                            'hasAddon' => isset($transaction->addon_code) && $transaction->addon_code != '',\n                            'price' => $transaction->amount,\n                            \"addondetails\" =>  [\n                                        \"name\" => \"HDPVR/XtraView\",\n                                        \"addoncode\" => \"HDPVRE36\"\n                                    ]\n                        ];\n                        $response = $this->makeBillPaymentApiCall($json);\n                        break;\n                    case 'Internet':\n                        $json =  [\n                            'serviceCode' => 'P-Internet',\n                            'account' => $transaction->cr_acc,\n                            'request_id' => $transaction->ref,\n                            'amount' => (int)$transaction->amount,\n                            'pinNo' => $autoInfo->auto_sub_prod_id,\n                            'type' => $autoInfo->auto_type\n                        ];\n                        $response = $this->makeBillPaymentApiCall($json);\n                        break;\n                    default:\n                        $json =  [\n                            'serviceCode' => $autoInfo->auto_prod_id,\n                            'account' => $transaction->cr_acc,\n                            'request_id' => $transaction->ref,\n                            'amount' => (int)$transaction->amount,\n                            'pinNo' => $autoInfo->auto_sub_prod_id,\n                            'type' => $autoInfo->auto_type\n                        ];\n                        $response = $this->makeBillPaymentApiCall($json);\n                        break;\n                }\n                if(isset($response['pin_based']) && $response['pin_based']){\n                    $token = isset($response['pin']) && sizeof($response['pin']) > 0 ? $response['pin'][0]['pin'] : \"\";\n                    $serial = isset($response['serial']) && sizeof($response['pin']) > 0 ? $response['pin'][0]['serial'] : \"\";\n                }\n\n                $this->updateRingoAutoResponse($response['status'], $response['message'], $transaction, $token ?? \"\", $response['transref'] ?? \"\", $serial ?? \"\", $json ?? []);\n            }\n        }catch (\\GuzzleHttp\\Exception\\RequestException $exception){\n            $this->updateRingoAutoResponse(\"404\", $exception->getMessage(), $transaction);\n        }\n    }\n\n    private function makeBillPaymentApiCall($json){\n        try {\n            $client = new Client();\n            $result = $client->post( config('app.ringo_url'), [\n                'json' => $json,\n                'headers' => [ 'Content-Type' => 'application/json', 'email' => config('app.ringo_email'), 'password' => config('app.ringo_password')],\n            ] );\n            return json_decode( $result->getBody(), true );\n        }catch (\\GuzzleHttp\\Exception\\RequestException $exception){}\n    }\n\n    private function updateSmePlugAutoResponse($response, $transaction)\n    {\n        if($response['status']){\n            $data = $response['data'];\n            $this->updateTransactionStatus($transaction->ref, RequestStatus::Approved, $data['reference']);\n            $this->updateAutoProcessing($transaction->ref, $data['msg'], $response['status'], $data['reference']);\n        }\n        else\n            $this->updateAutoProcessing($transaction->ref,  $response['msg'], $response['status']);\n    }\n\n    private function updateRingoAutoResponse($status, $message, $transaction, $token = '', $reference = '', $serial = '', $raw = [])\n    {\n        if($status == \"200\")\n            $this->updateTransactionStatus($transaction->ref, RequestStatus::Approved, $transaction->ref, null, $token, $serial);\n        else\n            $this->updateTransactionStatus($transaction->ref, RequestStatus::Failed, $transaction->ref);\n        $this->updateAutoProcessing($transaction->ref,  $message, $status, $reference, json_encode($raw));\n\n    }\n\n    public function getDailySales()\n    {\n        return DB::selectOne(\"SELECT count(*) as sales_count, sum(amount) as sales_amount from voucher_entity where date(created_at) = date(date_add(now(), INTERVAL 5 hour)) and approvalStatus = 1\");\n    }\n\n    private function getProductBySubId($sub_prod_id)\n    {\n        return DB::selectOne(\"SELECT P.*, S.auto_sub_prod_id FROM sub_product_entity as S inner join product_entity as P on S.product_id = P.product_id where S.sub_prod_id = ?\", array($sub_prod_id));\n    }\n\n    public function getUsersListByRole($role)\n    {\n        return DB::select(\"SELECT * from user_entity where userRole = ? ORDER by created_at DESC limit ?\", array($role, $this->limit));\n    }\n\n    public function filterTransactionByTransId($term)\n    {\n        return DB::select(\"SELECT V.*, U.fullname, S.sub_name FROM voucher_entity as V INNER JOIN user_entity as U on V.email = U.email INNER join sub_product_entity as S on V.sub_prod_id = S.sub_prod_id where ref like '%$term%' order by V.created_at desc\");\n    }\n\n    public function filterUsers($term)\n    {\n        return DB::select(\"SELECT * from user_entity where email like '%$term%' or fullname like '%$term%' or phoneno like '%$term%'\");\n    }\n\n    public function updateAppSplashScreen($file)\n    {\n        $this->table->updateTable('settings_entity', 'settings_id', 'app_splash', [], $file, $this->getRef(), 'settings_desc');\n    }\n\n    public function getAllSubProducts($email)\n    {\n        return DB::select(\"SELECT S.*, S.sub_price as sub_non_res_price, C.per_charges, (case when U.userRole = 'Agent' and S.sub_res_price > 0.0 THEN S.sub_res_price else S.sub_price end) as sub_price from sub_product_entity as S INNER join conversion_rate_entity as C on S.conversion_id = C.conversion_id left join user_entity as U on U.email = ?\", array($email));\n    }\n\n    public function getSubProductsByProdId($product_id, $email = null)\n    {\n        return DB::select(\"SELECT S.*, S.sub_price as sub_non_res_price, C.per_charges, (case when U.userRole = 'Agent' and S.sub_res_price > 0.0 THEN S.sub_res_price else S.sub_price end) as sub_price from sub_product_entity as S INNER join conversion_rate_entity as C on S.conversion_id = C.conversion_id left join user_entity as U on U.email = ? where S.product_id = ?\", array($email, $product_id));\n    }\n\n    public function queryTodayTransactions($status)\n    {\n        return DB::select(\"SELECT V.*, U.fullname, S.sub_name FROM voucher_entity as V INNER JOIN user_entity as U on V.email = U.email INNER join sub_product_entity as S on V.sub_prod_id = S.sub_prod_id where approvalStatus = ? and date(V.created_at) = date(date_add(now(), INTERVAL 5 hour)) order by V.created_at desc limit ?\", array($status, $this->limit));\n    }\n\n    private function insertAutoProcessing($transaction)\n    {\n        $this->table = new TableEntity();\n        $input = [\n            'ref' => $transaction->ref,\n            'created_at' => $transaction->created_at\n        ];\n        $this->table->insertNewEntry('log_entity', 'ref', $input);\n    }\n\n    private function getAutoProcessingLog($ref)\n    {\n        $this->table = new TableEntity();\n        $inputs = [['ref', '=', $ref]];\n        return $this->table->getSingleItemWithWhere('log_entity', 'ref', $inputs);\n    }\n\n    private function updateAutoProcessing($trans_ref, $msg, $status, $reference = '', $raw = '')\n    {\n        $v_status = $status ? 'success' : 'fail';\n        DB::update(\"UPDATE log_entity set msg = ?, status = ?, reference = ?, raw_req = ? WHERE ref = ?\", array($msg, $v_status, $reference, $raw, $trans_ref));\n    }\n\n    public function getAddonByCode($addon_code)\n    {\n        return $this->table->getSingleItem('addons_entity', 'addon_code', $addon_code);\n    }\n\n    public function getBvnDetail($bvn_number)\n    {\n        return $this->table->getSingleItemWithWhere('bvn_entity', 'bvn_number', [['bvn_number', '=', $bvn_number]]);\n    }\n\n    private function getAccessToken(){\n        try {\n            $api_key = $this->getMonifyBasicAuth();\n            $client = new Client();\n            $result = $client->post( config(\"app.monify_url\") . 'auth/login', [\n                'headers' => [\n                    'Content-Type' => 'application/json',\n                    'Authorization' => \"Basic \" . $api_key\n                ],\n            ]);\n            $response = json_decode( $result->getBody(), true );\n            return $response['responseBody']['accessToken'];\n        }catch (\\GuzzleHttp\\Exception\\RequestException $exception){\n            return null;\n        }\n    }\n\n    public function reserveAccount($user){\n        try {\n            $client = new Client();\n            $result = $client->post( config(\"app.monify_url\") . 'bank-transfer/reserved-accounts', [\n                'headers' => [\n                    'Content-Type' => 'application/json',\n                    'Authorization' => \"Bearer \" . $this->getAccessToken(),\n                ],\n                'json' => [\n                    \"accountReference\" => $user->phoneno,\n                    \"accountName\" => $user->fullname,\n                    \"currencyCode\" => \"NGN\",\n                    \"contractCode\" => config('app.monify_contract_code'),\n                    \"customerEmail\" => $user->email,\n                    \"customerName\" => $user->fullname,\n                    \"customerBvn\" => $user->bvn_number ?? \"\"\n                ]\n            ]);\n            $response = json_decode( $result->getBody(), true );\n            if($response['requestSuccessful']){\n                $accountNumber = $response['responseBody']['accountNumber'];\n                $this->updateProvidusAcct($response, $user->email);\n                return $accountNumber;\n            }\n            else\n                return  null;\n        }catch (\\GuzzleHttp\\Exception\\RequestException $exception){\n            return null;\n        }\n    }\n\n    private function calculateHashValue($inputs)\n    {\n        $params = config('app.monify_secret_key'). '|' . $inputs['paymentReference']. '|' .\n                  $inputs['amountPaid'] . '|' . $inputs['paidOn'] . '|' . $inputs['transactionReference'];\n        return hash(\"SHA512\", $params);\n    }\n\n    private function getMonifyBasicAuth()\n    {\n        return base64_encode( config(\"app.monify_api_key\"). ':' . config(\"app.monify_secret_key\"));\n    }\n\n    public function forgotPassword($user)\n    {\n        $data = DB::selectOne(\"select count(*) as counter, concat(conv(floor(rand() * 99999999999999), 20, 36),conv(floor(rand() * 99999999999999), 20, 36),conv(floor(rand() * 99999999999999), 20, 36)) as otp, otp_code from otp_entity where email = ? and timestampdiff(HOUR, gen_date, now())<= 24 and active = 1\", array($user->email));\n        $otp_code = $data->counter == 0 ? $data->otp : $data->otp_code;\n        if($data->counter == 0){//Insert new otp if none exist / already expired\n            DB::insert(\"INSERT INTO otp_entity(email, otp_code) VALUES(?, ?)\", array($user->email, $otp_code));\n            $data = [\n                'fullname' => $user->fullname,\n                'email' => base64_encode($user->email),\n                'token' => base64_encode($otp_code),\n            ];\n            $this->sendMail('emails.forgot_password', $user->email, 'Account Recovery', [], $data);\n        }\n    }\n\n    private function updateProvidusAcct($response, $email)\n    {\n        $accountNumber = $response['responseBody']['accountNumber'];\n        $bankCode = $response['responseBody']['bankCode'];\n        $data = [\n            'account_number' => $accountNumber,\n            'bank_code' => $bankCode\n        ];\n        return $this->table->updateTable('user_entity', 'email', $email, $data);\n    }\n\n    public function isAccountVerified($old_user)\n    {\n        return isset($old_user->bvn_number) && $old_user->bvn_number != null && $old_user->bvn_number != \"\";\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/admin/app/Model/Repository.php b/admin/app/Model/Repository.php
--- a/admin/app/Model/Repository.php	(revision a9e76872411cb9beb0a990c2bcc111e895ebe81c)
+++ b/admin/app/Model/Repository.php	(date 1615718085529)
@@ -208,9 +208,7 @@
 
     public function getUserByEmail($email)
     {
-        $user = $this->table->getSingleItem('user_entity', 'email', $email);
-        $user->virtual_bank_name = 'Sterling Bank Plc';
-        return $user ;
+        return $this->table->getSingleItem('user_entity', 'email', $email);
     }
 
     public function saveNewUser($input, bool $fromAdmin = false)
@@ -1564,6 +1562,7 @@
                         ];
                         $response = $this->makeBillPaymentApiCall($json);
                         $token = $response['token'] ?? "";
+                        $unit = $response['unit'] ?? "";
                         break;
                     case 'TV':
                         $json =  [
Index: admin/app/Http/Controllers/MobileApiController.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?php\n\nnamespace App\\Http\\Controllers;\n\nuse App\\Jobs\\HandleTransactionJob;\nuse App\\Model\\ActiveStatus;\nuse App\\Model\\JsonResponse;\nuse App\\Model\\PaymentMethod;\nuse App\\Model\\RequestStatus;\nuse App\\Model\\Services;\nuse App\\Model\\TransactionType;\nuse Illuminate\\Http\\Request;\n\nclass MobileApiController extends Controller\n{\n    private $agent_fee = 5000;\n    public function __construct()\n    {\n        $this->middleware(['mobile_auth'])->except('receiptTest', 'validateLogin', 'verifyPhoneNumber', 'registerUser', 'forgotPassword');\n        parent::__construct();\n    }\n    private function getUserWithJwt($email, $msg = null, $user = null)\n    {\n        $user = $user == null ? $this->mproxy->getUserByEmail($email) : $user;\n        if($user != null){\n            $user = $this->mproxy->addJwtToUser($user);\n            return json_encode(new JsonResponse(\"00\", $msg, $user));\n        }\n        else\n            return json_encode(new JsonResponse(\"-01\", \"User does not exist\"));\n    }\n    private function updateProfile($inputs)\n    {\n        $this->mproxy->updateUser($inputs, $inputs['email']);\n        return $this->getUserWithJwt($inputs['email'], 'Profile Updated Successfully!');\n    }\n    public function validateLogin(Request $request)\n    {\n        $inputs = $request->input();\n        $user = $this->mproxy->validateUser($inputs);\n        if($user != null){\n            if($user->is_email_verified == 1){\n                if($user->active == 1){\n                    $account_number = $this->mproxy->getAccountReserved($user->email);\n                    $user->account_number = $account_number;\n                    return $this->getUserWithJwt($user->email, 'Login Successfully!', $user);\n                }\n                else\n                    return json_encode(new JsonResponse(\"-01\", \"Your account is banned contact support@airtimedatahub.com\"));\n            }\n            else\n                return json_encode(new JsonResponse(\"-01\", \"Unverified Email Account!\"));\n        }\n        else\n            return json_encode(new JsonResponse(\"-01\", \"Invalid Username/Password!\"));\n\n    }\n    public function registerUser(Request $request)\n    {\n        $inputs = $request->input();\n        if($inputs['fullname'] != '' && $inputs['email'] != '' && $inputs['phoneno'] != '' && $inputs['address'] != '' && $inputs['password'] != ''){\n            if (filter_var($inputs['email'], FILTER_VALIDATE_EMAIL)) {\n                $user = $this->mproxy->getUserByEmailPhoneBvn($inputs['phoneno']);\n                if($user == null){\n                    $this->mproxy->saveNewUser($inputs);\n                    $user = $this->mproxy->getUserByEmail($inputs['email']);\n                    if($user != null) {\n                        $this->mproxy->sendRegMail($user);\n                        return json_encode(new JsonResponse(\"00\", \"Registration Successful...Kindly Check your email for a verification link!!\"));\n                    }\n                    else\n                        return json_encode(new JsonResponse(\"-01\", \"Email already exists\"));\n                }\n                else\n                    return json_encode(new JsonResponse(\"-01\", \"Phone number already exists\"));\n            }\n            else\n                return json_encode(new JsonResponse(\"-01\", \"Invalid email address\"));\n        }\n        else\n            return json_encode(new JsonResponse(\"-01\", \"All Field(s) are required!\"));\n    }\n    public function verifyPhoneNumber(Request $request, $phoneno){\n        $user = $this->mproxy->getUserByEmailPhoneBvn($phoneno);\n        $code = $user == null ? \"00\" : \"-01\";\n        $msg = $user == null ? \"Verification Successful!\" : \"Phone Number already exist(s)\";\n        return json_encode(new JsonResponse($code, $msg, $phoneno));\n    }\n    public function updateUserToken(Request $request)\n    {\n        $inputs = $request->input();\n        $email = $this->mproxy->getEmailFromJwt($request);\n        $this->mproxy->updateUserToken($inputs, $email);\n        $user = $this->mproxy->getUserByEmail($email);\n        if($user->account_number == null || $user->account_number == ''){\n            $this->mproxy->reQueryReservedAccount($user);\n        }\n        return $this->getUserWithJwt($email, 'Token Updated!');\n    }\n    public function updateProfileBasic (Request $request){\n        $inputs = $request->input();\n        $inputs['email'] = $this->mproxy->getEmailFromJwt($request);\n        return $this->updateProfile($inputs);\n    }\n    public function updateProfileImage (Request $request){\n        $email = $this->mproxy->getEmailFromJwt($request);\n        $this->mproxy->updateUserImage($request->file('fileToUpload'), $email);\n        return $this->getUserWithJwt($email, 'Uploaded Successfully!');\n    }\n    public function updateProfileDocument (Request $request){\n        $email = $this->mproxy->getEmailFromJwt($request);\n        $this->mproxy->updateProfileDocument($request->file('fileToUpload'), $email, $request->input('doc_type'));\n        return $this->getUserWithJwt($email, 'Uploaded Successfully!');\n    }\n    public function updateProfileBvn (Request $request){\n        $inputs = $request->input();\n        $user = $this->mproxy->getUserByEmailPhoneBvn($inputs['bvn_number']);\n        if($user == null){\n            if($this->mproxy->verifyBvn($inputs)){\n                $bvnDetail = $this->mproxy->getBvnDetail($inputs['bvn_number']);\n                $inputs = [];\n                $inputs['fullname'] = $bvnDetail->last_name . ' ' . $bvnDetail->first_name;\n                $inputs['dob'] = $bvnDetail->bvn_dob;\n                $inputs['phoneno'] = $bvnDetail->bvn_phone;\n                $inputs['bvn_number'] = $bvnDetail->bvn_number;\n                $inputs['email'] = $this->mproxy->getEmailFromJwt($request);\n                return $this->updateProfile($inputs);\n            }\n            else\n                return json_encode(new JsonResponse(\"-01\", \"BVN Verification Failed\", $inputs));\n        }\n        else\n            return json_encode(new JsonResponse(\"-01\", \"BVN already used\", $inputs));\n    }\n    public function verifyUserPhoneEmail(Request $request, $phone_email){\n        $user = $this->mproxy->getUserByEmailPhoneBvn($phone_email);\n        $code = $user == null ? \"-01\" : \"00\";\n        $message = $user == null ? \"User not found!\" : \"User found!\";\n        return json_encode(new JsonResponse($code, $message, $user));\n    }\n    public function referralCode(Request $request){\n        $email = $this->mproxy->getEmailFromJwt($request);\n        $referral = $this->mproxy->getReferralByEmail($email);\n        return json_encode(new JsonResponse(\"00\", null, $referral));\n    }\n    public function myReferrals(Request $request){\n        $email = $this->mproxy->getEmailFromJwt($request);\n        $referral = $this->mproxy->getReferralByEmail($email);\n        if($referral != null){\n            $earnings = $this->mproxy->getReferralEarnings($referral['ref_code']);\n            if($earnings != null && sizeof($earnings) > 0)\n                return json_encode(new JsonResponse(\"00\", null, $earnings));\n            else{\n                $ref_code = $referral['ref_code'];\n                return json_encode(new JsonResponse(\"-01\", \"Oops, you have no referral yet, share your referral code [$ref_code] to others to get referrals\"));\n            }\n        }\n        else\n            return json_encode(new JsonResponse(\"-01\", \"Oops, You have no referral code yet, kindly upgrade your account to an agent to get a personalized referral code.\"));\n    }\n    public function upgradeAccount(Request $request){\n        $email = $this->mproxy->getEmailFromJwt($request);\n        $balance = $this->mproxy->getWalletBalance($email);\n        if($balance >= $this->agent_fee){\n            $reference = $this->mproxy->generateRef();\n            $inputs['amount'] = $this->agent_fee;\n            $inputs['email'] = $email;\n            $inputs['reference'] = $reference;\n            $inputs['ref_code'] = $this->mproxy->genReferralCode($email, $reference);\n            $this->mproxy->saveReferralCode($inputs);\n            $referral = $this->mproxy->getReferralByEmail($email);\n            $code = $referral == null ? \"-01\" : \"00\";\n            $msg = $referral == null ? \"Error Occurs!\" : \"Your account upgrade is successful!\";\n        }\n        else{\n            $code = \"-01\";\n            $msg = \"Insufficient Fund!\";\n        }\n        return json_encode(new JsonResponse($code, $msg, $referral ?? null));\n    }\n    public function sendSupportMsg (Request $request){\n        $email = $this->mproxy->getEmailFromJwt($request);\n        $inputs = $request->input();\n        $inputs['email'] = $email;\n        $this->mproxy->sendSupportMsg($inputs);\n        $contact = $this->mproxy->getSupportMsgById($inputs['support_id']);\n        $code = $contact == null ? \"-01\" : \"00\";\n        $msg = $contact == null ? \"Error Occurs\" : \"Message Submitted!\";\n        return json_encode(new JsonResponse($code, $msg, $contact));\n    }\n    public function bankList(){\n        $bankList = $this->mproxy->getBankList();\n        return json_encode(new JsonResponse(\"00\", null, $bankList));\n    }\n    public function postTransaction(Request $request){\n        $inputs = $request->input();\n        $email = $this->mproxy->getEmailFromJwt($request);\n        $user = $this->mproxy->getUserByEmail($email);\n        $subProduct = $this->mproxy->getSubProductDetail($inputs['sub_prod_id']);\n        if($subProduct->active == ActiveStatus::Active){\n            if($inputs['amount'] > 0){\n                if($inputs['service_id'] == Services::Airtime2Cash &&  empty($user->bvn_number))\n                    return json_encode(new JsonResponse(\"-01\", \"Account not verified!\"));\n                else{\n                    $transaction = $this->mproxy->postTransaction($inputs , $user, $subProduct);\n                    if($transaction != null){\n                        $transaction = $this->mproxy->getLastTransaction($email);\n                        $this->mproxy->sendPostedTransNotifications($transaction);\n                        if($inputs['service_id'] == Services::Airtime2Cash){\n                            $message = 'Your airtime order has been received successfully. It takes an average of 3-5 minutes to complete this transaction';\n                            return json_encode(new JsonResponse(\"00\", $message, $transaction));\n                        }\n                        else{\n                            $this->mproxy->handlesServicesAutomation($transaction);\n                            $message = $transaction->sub_name . \" request has been submitted successfully!\";\n                            return json_encode(new JsonResponse(\"00\", $message, $transaction));\n                        }\n                    }\n                    else\n                        return json_encode(new JsonResponse(\"-01\", \"Error processing request. Please try again!\"));\n\n                }\n            }\n            else\n                return json_encode(new JsonResponse(\"-01\", \"Invalid Amount!\"));\n        }\n        else\n            return json_encode(new JsonResponse(\"-01\", \"Product is currently unavailable!\"));\n\n    }\n    public function postWalletTransaction(Request $request){\n        $inputs = $request->input();\n        $transaction = $this->mproxy->getWalletTransByPayRef($inputs['payment_ref']);\n        $amount = $transaction == null ? ($inputs['amount'] / 101.5) : $transaction->amount;\n        $msg = \"Your wallet account has been successfully credited with N\". $amount;\n        return json_encode(new JsonResponse(\"00\", $msg, $transaction));\n    }\n    public function productList(Request $request, $arg){\n        $productList = $this->mproxy->getProductsByServiceId($arg);\n        return json_encode(new JsonResponse(\"00\", null, $productList));\n    }\n    public function getBannerList(){\n        $bannersList = $this->mproxy->getBannerList(false);\n        return json_encode(new JsonResponse(\"00\", null, $bannersList));\n    }\n    public function walletTransList(Request $request){\n        $email = $this->mproxy->getEmailFromJwt($request);\n        $walletList = $this->mproxy->getWalletTransHistory($email, false  );\n        return json_encode(new JsonResponse(\"00\", null, $walletList));\n    }\n    public function dataBalList(){\n        $dataBalCodeList = $this->mproxy->getDataBalanceCodeList(false);\n        return json_encode(new JsonResponse(\"00\", null, $dataBalCodeList));\n    }\n    public function subProductList(Request $request){\n        $email = $this->mproxy->getEmailFromJwt($request);\n        $subProdList = $this->mproxy->getAllSubProducts($email);\n        return json_encode(new JsonResponse(\"00\", null, $subProdList));\n    }\n    public function subProductListByProdId(Request $request, $arg){\n        $email = $this->mproxy->getEmailFromJwt($request);\n        $subProdList = $this->mproxy->getSubProductsByProdId($arg, $email);\n        return json_encode(new JsonResponse(\"00\", null, $subProdList));\n    }\n    public function productTransactionList(Request $request){\n        $email = $this->mproxy->getEmailFromJwt($request);\n        $transList = $this->mproxy->getProductTransHistory($email);\n        return json_encode(new JsonResponse(\"00\", null, $transList));\n    }\n    public function paymentAcctList(){\n        $acctList = $this->mproxy->getAccountList();\n        return json_encode(new JsonResponse(\"00\", null, $acctList));\n    }\n    public function cancelTransaction(Request $request, $arg){\n        $this->mproxy->updateTransactionStatus($arg, RequestStatus::Cancelled);\n        $trans = $this->mproxy->getTransactionDetailById($arg);\n        return json_encode(new JsonResponse(\"00\", \"Cancelled Successfully!\", $trans));\n    }\n    public function faqList(){\n        $faqList = $this->mproxy->getFaqList();\n        return json_encode(new JsonResponse(\"00\", null, $faqList));\n    }\n    public function requestPayout(Request $request){\n        $inputs = $request->input();\n        $email = $this->mproxy->getEmailFromJwt($request);\n        $userDetail = $this->mproxy->getUserByEmail($email);\n        $isVerified = $this->mproxy->isAccountVerified($userDetail);\n        if($isVerified){\n            $pendingPayout = $this->mproxy->getPendingPayout($email);\n            if($pendingPayout == null){\n                $accountBal = $this->mproxy->getWalletBalance($email);\n                if($inputs['amount'] > 0){\n                    if($accountBal >= $inputs['amount']){\n                        $inputs['email'] = $email;\n                        $this->mproxy->savePayoutRequest($inputs);\n                        $payoutRequest = $this->mproxy->getPayoutRequestById($inputs['payout_id']);\n                        if($payoutRequest != null){\n//                        $accountBal = $this->mproxy->getAirtime2CashAvailBal($email);\n//                        if($accountBal >= $inputs['amount']){\n//\n//                        }\n                            $this->mproxy->handlesWithdrawalAutomation($payoutRequest);\n                            return json_encode(new JsonResponse(\"00\", \"Withdrawal request of N\". number_format($inputs['amount'], 2) . ' has been submitted successfully!', $payoutRequest));\n                        }\n                        else\n                            return json_encode(new JsonResponse(\"-01\", \"Payout Request Fail...Try Again!\"));\n                    }\n                    else\n                        return json_encode(new JsonResponse('-01', 'Insufficient Balance'));\n                }\n                else\n                    return json_encode(new JsonResponse('-01', 'Invalid Amount!'));\n            }\n            else\n                return json_encode(new JsonResponse('-01', 'You have a pending payout request'));\n        }\n        else\n            return json_encode(new JsonResponse('-01', 'Account not verified'));\n    }\n    public function bankTransfer(Request $request){\n        $inputs = $request->input();\n        if($inputs['amount'] > 0){\n            $inputs['email'] = $this->mproxy->getEmailFromJwt($request);\n            $this->mproxy->saveBankTransfer($inputs);\n            $bankTransfer = $this->mproxy->getBankPaymentRef($inputs['payment_ref']);\n            if($bankTransfer != null){\n                $this->mproxy->sendFundWalletNotification($bankTransfer, PaymentMethod::Bank, 'Fund Wallet - Bank');\n                $message = \"Your wallet credit request of N \". number_format($bankTransfer->amount, 2). ' is pending approval.';\n                return json_encode(new JsonResponse(\"00\", $message, $bankTransfer));\n            }\n            else\n                return json_encode(new JsonResponse(\"-01\", \"Error Occurs!\"));\n        }\n        else\n            return json_encode(new JsonResponse('-01', 'Invalid Amount'));\n\n    }\n    public function fundTransfer(Request $request){\n        $inputs = $request->input();\n        $inputs['sender_email'] = $this->mproxy->getEmailFromJwt($request);\n        if($inputs['amount'] > 0){\n            $accountBal = $this->mproxy->getWalletBalance($inputs['sender_email']);\n            if($accountBal >= $inputs['amount']){\n                $this->mproxy->transferFund($inputs);\n                $walletTrans = $this->mproxy->getWalletTransByPayRef($inputs['payment_ref']);\n                if($walletTrans != null){\n                    $this->mproxy->sendWalletTransferNotification($walletTrans, $inputs['sender_email'], $inputs['receiver_email']);\n                    return json_encode(new JsonResponse(\"00\", \"Fund transfer of N\". $inputs['amount']. ' is successful!', $walletTrans));\n                }\n                else\n                    return json_encode(new JsonResponse('-01', 'Error occurs during transfer'));\n            }\n            else\n                return json_encode(new JsonResponse('-01', 'Insufficient Fund'));\n        }\n        else\n            return json_encode(new JsonResponse('-01', 'Invalid Amount'));\n\n    }\n    public function verifyAccountNumber(Request $request){\n        $inputs = $request->input();\n        $response = $this->mproxy->verifyAccountNumber($request->input());\n        if($response != null && $response->status && $response->data != null){\n            $inputs['acc_name'] = $response->data->account_name;\n            return json_encode(new JsonResponse(\"00\", $response->message, $inputs ));\n        }\n        else\n            return json_encode(new JsonResponse(\"-01\", $response->message));\n\n    }\n    public function addUserBank(Request $request){\n        $inputs = $request->input();\n        $bank = $this->mproxy->getUserBankByAcctNo($inputs['acc_no']);\n        if($bank == null){\n            $inputs['email'] = $this->mproxy->getEmailFromJwt($request);\n            $this->mproxy->saveUserBank($inputs);\n            $bank = $this->mproxy->getUserBankByAcctNo($inputs['acc_no']);\n            $code = $bank == null ? \"-01\" : \"00\";\n            $message = $bank == null ? \"Error Occurs...Try Again!\" : \"Added Successfully!\";\n        }\n        else{\n            if($bank->active == 0){\n                $this->mproxy->updateUserBankAccount($bank->acc_no, $inputs);\n                $bank->active = strval(ActiveStatus::Active);\n                $code = \"00\"; $message = \"Added Successfully!\";\n            }\n            else{\n                $code =\"-01\";  $message = \"Account Number already added!\";\n            }\n\n        }\n        return json_encode(new JsonResponse($code, $message, $bank));\n    }\n    public function getUserBanks(Request $request){\n        $email = $this->mproxy->getEmailFromJwt($request);\n        $banks = $this->mproxy->getUserBanksByEmail($email);\n        return json_encode(new JsonResponse(\"00\", \"Bank Account List\", $banks));\n    }\n    public function deleteUserBank(Request $request){\n        $inputs = $request->input();\n        $this->mproxy->deleteUserBank($inputs['acc_no']);\n        $bank = $this->mproxy->getUserBankByAcctNo($inputs['acc_no']);\n        return json_encode(new JsonResponse(\"00\", \"Deleted Successfully!\", $bank));\n    }\n    public function supportMessages(Request $request){\n        $email = $this->mproxy->getEmailFromJwt($request);\n        $messages = $this->mproxy->getMySupportMessages($email);\n        return json_encode(new JsonResponse(\"00\", \"Message List\", $messages));\n    }\n    public function supportReplies(Request $request, $arg){\n        $email = $this->mproxy->getEmailFromJwt($request);\n        $this->mproxy->updateMessageReadFlag($arg, $email);\n        $replies = $this->mproxy->getMessageReplies($arg);\n        return json_encode(new JsonResponse(\"00\", \"Message Reply List\", $replies));\n    }\n    public function saveSupportReply(Request $request){\n        $email = $this->mproxy->getEmailFromJwt($request);\n        $input = $request->input();\n        $file = $request->hasFile('fileToUpload') ? $request->file('fileToUpload') : null;\n        $this->mproxy->saveMessageReply($input, $email, $input['reply_id'], $file );\n        $reply = $this->mproxy->getMsgReplyById($input['reply_id']);\n        $code = $reply == null ? \"-01\" : \"00\";\n        $msg = $reply == null ? \"Error Occurs!\" : \"Message Sent Successfully!\";\n        return json_encode(new JsonResponse($code, $msg, $reply));\n    }\n    public function appSettingsList(){\n        $settings = $this->mproxy->getAppSettings();\n        return json_encode(new JsonResponse(\"00\", \"Settings List\", $settings));\n    }\n    public function validateNumber(Request $request, $sub_prod_id, $number){\n        $response = $this->mproxy->validateBillPayment($sub_prod_id, $number);\n        if($response != null){\n            if($response['status'] == '200')\n                return json_encode(new JsonResponse(\"00\", 'Validation Successful', $response['customerName']));\n            else\n                return json_encode(new JsonResponse(\"-01\", $response['message']));\n        }\n        else\n            return json_encode(new JsonResponse(\"-01\", \"Could not validate\"));\n    }\n    public function validateDiscountCode(Request $request, $sub_prod_id,  $code){\n        $email = $this->mproxy->getEmailFromJwt($request);\n        $discount = $this->mproxy->validateDiscountCode($email, $sub_prod_id, $code);\n        if($discount != null)\n            return json_encode(new JsonResponse(\"00\", \"Coupon Code\", $discount));\n        else\n            return json_encode(new JsonResponse(\"-01\", \"Invalid Coupon code\"));\n    }\n    public function addonsDetail(Request $request, $addon_code){\n        $addon = $this->mproxy->getAddonByCode($addon_code);\n        if($addon != null)\n            return json_encode(new JsonResponse(\"00\", 'Addon Detail', $addon));\n        else\n            return json_encode(new JsonResponse(\"-01\", 'Could not find an Addon'));\n    }\n    public function forgotPassword(Request $request, $email){\n        $user = $this->mproxy->getUserByEmailPhoneBvn($email);\n        if($user != null){\n            $this->mproxy->forgotPassword($user);\n            return json_encode(new JsonResponse(\"00\", \"A password reset link has been sent your mail\"));\n        }\n        else\n            return json_encode(new JsonResponse(\"-01\", \"Email does not exist!\"));\n    }\n    public function walletBalance(Request $request){\n        $email = $this->mproxy->getEmailFromJwt($request);\n        $balance = $this->mproxy->getWalletBalance($email);\n        return json_encode(new JsonResponse(\"00\", \"Wallet Balance!\", $balance));\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/admin/app/Http/Controllers/MobileApiController.php b/admin/app/Http/Controllers/MobileApiController.php
--- a/admin/app/Http/Controllers/MobileApiController.php	(revision a9e76872411cb9beb0a990c2bcc111e895ebe81c)
+++ b/admin/app/Http/Controllers/MobileApiController.php	(date 1615632657704)
@@ -24,6 +24,7 @@
         $user = $user == null ? $this->mproxy->getUserByEmail($email) : $user;
         if($user != null){
             $user = $this->mproxy->addJwtToUser($user);
+            $user->bank_name = 'Sterling Bank Plc';
             return json_encode(new JsonResponse("00", $msg, $user));
         }
         else
